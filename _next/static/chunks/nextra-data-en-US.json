{"/icHud":{"title":"Ice Cluster","data":{"":"Take your FiveM server to the next level with our feature-packed script! Our script offers a host of advanced features to keep players informed and engaged, including real-time notifications, custom player and vehicle HUDs, and seamless CarPlay integration. With these powerful tools at your disposal, youâ€™ll be able to create an immersive and competitive gaming experience like never before. Upgrade your FiveM server and blow your competition out of the water with our powerful script today!","support#Support":"Right now we only give support in our Discord Server. If you ask in the forum we will try to answer you as soon as possible but to make sure to get an answer join our Discord Server."}},"/icHud/Installation":{"title":"Intallation","data":{"installation#Installation":"It is recommended that one follows each step sequentially from the outset to ensure that no installation errors arise.","start-order#Start Order":"In order for the resource to start correctly and not receive any errors, we must start the resources in the following order\nensure core\r\n...\r\nensure ichud","setup-config#Setup Config":"In order for the script to function properly, you must change the Config.Framework setting to your framework in this case it will be \"qb-core\". Feel free to make any other necessary changes as well.\nConfig = {}\r\n\r\nConfig.Framework = \"esx\" -- newqb, oldqb, esx, newesx\r\n\r\nConfig.StatusHud = true  -- If you set it to true, the hud will be activated\r\nConfig.CarHud = true     -- If you set it to true, the Car Hud will be activated\r\nConfig.Notify = true     -- If you set it to true, notifications will be activated\r\nConfig.CarPlayer = true  -- If you set it to true, the Car Player will be activated\r\nConfig.MusicPlayer = true  -- If you set it to true, the Music of the Tablet will be show\r\nConfig.EngineHud = true  -- If you set it to true, the Engine Hud will be activated\r\nConfig.RefreshSpeedoMeterTime = 80 -- Time in ms to refresh the speedometer (50 = 0.05 seconds, 100 = 0.10 seconds) if you want to speedometer to refresh faster decress this value.\r\nConfig.SetZoomMinimap = 1 -- Set the minimap zoom (0 = normal, 1 = zoomed in)\r\nConfig.DisableMinimapModifications = false -- If you set it to true all changes maded to the map will desappear, this will help if there's another script changing minimap stuff.\r\n\r\nConfig.HideFullStatus = true -- If you set it to true, all the status hud that are at 100% will be hided,if you set to false the status hud will be showed always\r\n\r\n-- Config for the Car Radio System Sound\r\nConfig.RefreshTimeSound = 0 -- How much ofter the player position is updated ?\r\nConfig.distanceBeforeUpdatingPos = 40 -- how much close player has to be to the sound before starting updating position ?\r\n\r\n--[[ \r\n    OPTIONS: LegacyFuel, oxFuel, cdn-fuel, standalone\r\n    OTHER: set the name of the export function, for example: myFuel\r\n]]\r\nConfig.FuelSystem = \"standalone\" -- Set the name of the export functions used by the fuel\r\n\r\nConfig.SeatBeltOn = \"You have fastened your seat belt\"\r\nConfig.SeatBeltOff = \"You have unbuckled your seatbelt\"\r\nConfig.notVehicleSeatBelt = \"This vehicle does not have a seat belt\"\r\nConfig.commandSeatBelt = \"belt\"\r\nConfig.cruiseOnText = \"You turned on speed limiter\"\r\nConfig.cruiseOffText = \"You turned off speed limiter\"\r\nConfig.cruiseControlOnText = \"You turned on cruise control\"\r\nConfig.cruiseControlOffText = \"You turned off cruise control\"\r\nConfig.cruiseControlnotinVehicleText = \"You are not in any vehicle or you are not the driver\"\r\nConfig.StreamerModeONMSG = \"You have activated streamer mode for music.\"\r\nConfig.StreamerModeOFFMSG = \"You have deactivated the streamer mode for music.\"\r\nConfig.SpeedUnit = true -- True is km/h -- False is mp/h\r\nConfig.notvehicleCarPlay = \"This vehicle does not have carplay\"\r\nConfig.SetNewWaypoint = \"You have set a new waypoint\"\r\nConfig.AnyVehicle = \"You are not in any vehicle\"\r\nConfig.MoneyNotify = \"You have ${x} in your wallet\"\r\nConfig.BankNotify = \"You have ${x} in your bank\"\r\n\r\n\r\n\r\nConfig.SeatBeltEjectSpeed = 20\r\nConfig.SeatBeltEjectAccel = 100.0\r\nConfig.TimeOutRequestMax = 10 -- Max seconds if user don't answer the request\r\nConfig.SetDistanceAudio = 7.5 -- Distance to hear the audio\r\n\r\n------------ KEYS -------------\r\n\r\nConfig.SeatBeltKey = \"X\"\r\nConfig.IndicatorBothKey = \"BACK\"\r\nConfig.IndicatorRightKey = \"RIGHT\"\r\nConfig.IndicatorLeftKey = \"LEFT\"\r\nConfig.CruiseKey = \"M\"\r\nConfig.CruiseControlKey = \"L\"\r\nConfig.EngineButton = \"J\"\r\nConfig.CarPlayerKey = \"Y\"","setup-translations#Setup Translations":"To make changes to certain translations, you can edit the translations.js file. This file contains all the necessary settings to modify the translations.File Location: ice_hud\\src\\ui\\js\\config\\translation.js\nYou must edit the text on the right, the text on the left should not change.\nConfig = {};\r\n\r\nConfig.Locales = {\r\n    \"Engine\": \"Engine\",\r\n    \"Stop\": \"Stop\",\r\n    \"Start\": \"Start\",\r\n    \"url_youtube\": \"URL YouTube\",\r\n    \"locating\": \"Localizing...\",\r\n    \"fuel_text\": \"Fuel\",\r\n    \"vehhealth_text\": \"Health\",\r\n    \"speed_text\": \"Speed\",\r\n    \"maxgear_text\": \"Gears\",\r\n    \"location_text\": \"My location\",\r\n    \"waypoint_text\": \"Waypoint\",\r\n};"}},"/icHud/Library":{"title":"Library","data":{"library#Library":"Here you will find a very complete 2D and 3D audio system that you can integrate into any script.","functions#Functions":"","playing-sound#Playing Sound":"--2D Sound\r\n    PlayMusicUrl(musicIdentifier, URL, volume, loop, options)\r\n    -- loop and options parameters are optional, so they aren't needed to execute the function\r\n\r\n    --3D Sound\r\n    PlayMusicUrlPos(musicIdentifier, URL, volume, loop, options)\r\n    -- loop and options parameters are optional, so they aren't needed to execute the function\n   --2D Sound\r\n    PlayMusicUrl(musicIdentifier, URL, volume, loop, options)\r\n    -- loop and options parameters are optional, so they aren't needed to execute the function\r\n\r\n    --3D Sound\r\n    PlayMusicUrlPos(musicIdentifier, URL, volume, loop, options)\r\n    -- loop and options parameters are optional, so they aren't needed to execute the function\nonPlayStart\nonPlayEnd\nonLoading\nonPlayPause\nonPlayResume","manipulation-with-sound#Manipulation with sound":"Position(musicIdentifier, Vector3 vec)\r\n-- Will update location of sound\nDistance(musicIdentifier, newDistance)\r\n-- Will set new playing distance from location\nDestroy(musicIdentifier)\r\n-- Will destroy sound\nPause(musicIdentifier)\r\n-- Will pause sound\nResume(musicIdentifier)\r\n-- Will resume sound\nsetVolume(musicIdentifier, volume)\r\n-- volume is from 0.0 to 1.0\r\n-- Will set a new value to volume. Should be used for non 3D sound\nsetVolumeMax(musicIdentifier, volume)\r\n-- volume is from 0.0 to 1.0\r\n-- will set new value to max volume. Should be used only for 3D sound\nsetTimeStamp(musicIdentifier, time)\r\n-- will set a new timestamp.\nsetSoundURL(musicIdentifier, url)\r\n-- will set new URL to sound (will play whenever changed)\nrepeatSound(musicIdentifier)\r\n-- will play again the saved sound\ndestroyOnFinish(musicIdentifier, bool)\r\n-- true = destroy on end / false = do not destroy on end\n    setSoundLoop(musicIdentifier, bool)\r\n    -- will set a new value to loop\nsetSoundDynamic(musicIdentifier, bool)\r\n-- will set if the sound is 3D / 3D = true","effects-on-sound#Effects on sound":"fadeOut(musicIdentifier, time)\nfadeIn(musicIdentifier, time, volume)","events-client-side-only#Events (client side only)":"onPlayStart(name, function)\r\n--This event will trigger after the sound\r\n--is loaded and start playing in game.\nonPlayEnd(name, function)\r\n--This event will be triggered after sound end.\nonLoading(name, function)\r\n--This event will be triggered when the sound start loading.\nonPlayPause(name, function)\r\n--This event will be triggered whenever you pause sound.\nonPlayResume(name, function)\r\n--This event will be triggered whenever you resume sound.","getting-info-about-sound#Getting info about sound":"soundExists(name)\r\n--Will return true/false if sound exists\nisPaused(name)\r\n--Will return true/false if song is paused\nisPlaying(name)\r\n--Will return true/false if song is playing\nisLooped(name)\r\n--Will return true/false if sound is looped\ngetDistance(name)\r\n--Will return distance in Integer\ngetVolume(name)\r\n--Will return current volume of music.\ngetPosition(name)\r\n--Will return vector3\nisDynamic(name)\r\n--Will return if sound is 3D or 2D (3D = true, 2D = false)\ngetTimeStamp(name)\r\n--returns current timestamp\ngetMaxDuration(name)\r\n--returns max duration of sound\ngetLink(name)\r\n--Will return url link\nisPlayerInStreamerMode()\r\n--will return if player got streamer mode enabled.\ngetAllAudioInfo()\r\n--Will return array of all sound\nisPlayerCloseToAnySound()\r\n--will return true if player is close to any sound.\ngetInfo(name)\r\n--Will return an array with info of the sound...\r\n-- return:\r\n{\r\n   volume,          -- value from 0.0 to 1.0\r\n   url ,            -- sound url\r\n   id,              -- id \r\n   position,        -- will be nil if position isnt set.\r\n   distance,        -- distance in integer\r\n   playing,         -- true/false\r\n   paused,          -- true/false\r\n   loop,            -- true/false\r\n   isDynamic,       -- true/false\r\n   timeStamp,       -- returns current timestamp\r\n   maxDuration,     -- returns max duration of sound\r\n   destroyOnFinish, -- default value is true means after its finish it will destroy it self\r\n}"}},"/icMySQL":{"title":"Ice Cluster","data":{"":"An sophisticated encapsulation of the mysql2 and sequelize libraries, ingeniously designed to empower CFX scripts with seamless capabilities for accessing and manipulating data within relational databases.","why#Why?":"We created this database connection system because, even though there are good solutions out there, we wanted to bring something new to the table for the FiveM community. We've added some cool features that are missing in other systems, and we hope you find it useful!","known-issues#Known Issues":"We're going to list some known issues here, so you don't have to worry about them. Or you don't have to report them, because we already know about them. If you find any other issues, please report them in our Discord Server.\nFirst query after a restart is slow(because we wait to make the connection to the database)\nThread hitch warning when starting the resource(don't worry, it's normal)","support#Support":"Right now we only give support in our Discord Server. Anyway you can open an issue in our GitHub, if you ask in the forum we will try to answer you as soon as possible but to make sure to get an answer join our Discord Server."}},"/icHud/Functions":{"title":"Functions","data":{"functions#Functions":"Here you will find a list of all available functions to integrate into your own scripts.","show-notification#Show Notification":"These notifications are displayed in the right corner, they only show information and cannot be interacted with.\nexports['ice_hud']:Notify(Text, 5000)","params#Params":"Notification Text (The text that will be displayed in the notification)\nNotification Time (The time the notification will be open expressed in milliseconds)","example#Example":"Here we see the difference between an QBCore and an ICE notification, the most notable difference is the appearance of one more parameter in the function, which in this case is the duration so that you can modify it to your liking.\nQBCore.Functions.Notify(\"My QBCore testing notification\")\nexports['ice_hud']:Notify(\"My Ice testing notification\", 5000)\nThe notification time is expressed in milliseconds, so 5 seconds equals 5000 milliseconds. Otherwise the notification will not work.","help-notification#Help Notification":"These notifications are displayed at the top right, and give information to interact with certain things.\nexports['ice_hud']:HelpNotify(Text)","params-1#Params":"Notification Text (The text that will be displayed in the notification)","example-1#Example":"There is no difference between the QBCore and ICE function, the parameters are the same, you only need to change the name of the function.\nQBCore.Functions.DrawText3D(154.54, -200.4, 35, \"My QBCore help notification example\")\nexports['ice_hud']:HelpNotify(\"My Ice help notification example\")","request-notification#Request Notification":"This notification allows the user to receive a request in which he can accept or reject it.\nlocal dialog = exports['ice_hud']:RequestNotify({\r\n       title = \"My Title\",\r\n       description = \"My description\",\r\n       btnAccept = \"Accept\",\r\n       btnCancel = \"Decline\"\r\n})\r\n-- dialog return a bool value","params-values-must-be-inside-a-json#Params (values must be inside a JSON):":"title (The title of the request notify)\ndescription (The text that will be placed above the title that contain all info related to the notify)\nbtnAccept (The text that will be inside the accept button)\nbtnCancel (The text that will be inside the cancel button)","return#Return":"A bool value that is the option that the user has selected.\nIn this example a notification is shown when the player enters the command \"reqnotify\", in any case a notification will appear notifying the player of the action performed.\nRegisterCommand(\"reqnotify\", function()\r\n    local dialog = exports['ice_hud']:RequestNotify({\r\n        title = \"Test Notify\",\r\n        Description = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam eu semper felis, eget ornare nisi. \",\r\n        btnAccept = \"test\",\r\n        btnCancel = \"cance\"\r\n    })\r\n    \r\n    if dialog == true then\r\n        exports['ice_hud']:Notify(\"ACCEPTED!\", 5000)\r\n    else\r\n        exports['ice_hud']:Notify(\"REJECTED!\", 5000)\r\n    end\r\nend)\nIn this example a notification is displayed asking the player if he wants to buy an adder for $50,000, in case he refuses a notification will appear alerting him of the action.\nlocal dialog = exports['ice_hud']:RequestNotify({\r\n    title = \"Buy Vehicle\",\r\n    Description = \"Â¿You want to buy a adder for 50.000$?\",\r\n    btnAccept = \"Yes\",\r\n    btnCancel = \"No\"\r\n})\r\n    \r\nif dialog == true then\r\n        local coords = QBCore.Functions.GetCoords(PlayerPedId())\r\n        QBCore.Functions.SpawnVehicle('adder', function(veh)\r\n            SetVehicleNumberPlateText(veh, 'TEST')\r\n            SetEntityHeading(veh, coords.w)\r\n            exports['LegacyFuel']:SetFuel(veh, 100.0)\r\n            TaskWarpPedIntoVehicle(PlayerPedId(), veh, -1)\r\n            TriggerEvent(\"vehiclekeys:client:SetOwner\", QBCore.Functions.GetPlate(veh))\r\n            SetVehicleEngineOn(veh, true, true)\r\n        end, coords, true)\r\n        exports['ice_hud']:Notify(\"YOU HAVE BOUGHT AN ADDER!\", 5000)\r\nelse\r\n        exports['ice_hud']:Notify(\"YOU HAVE DECLINED THE OFFERT!\", 5000)\r\nend"}},"/icMySQL/Benchmark/With-Cache":{"title":"Benchmark With Cache","data":{"":"AquÃ­ vamos a mostrar cuanto consume las consultas realizadas a una base de datos mysql utilizando nuestro sistema de cache.\r\nObviamente estoy podria variar mucho dependiendo de los componentes del ordenador que realice las operaciones.","code#Code":"Citizen.CreateThread(function()\r\n    local times = 10000\r\n    for i=0, times do\r\n        local startTime = os.nanotime()\r\n        local result = exports[\"ice_mysql\"]:AwaitSelect(1, \"SELECT name FROM players WHERE id=?\", {3}, true)\r\n        local endTime = os.nanotime()\r\n        local spend = endTime - startTime\r\n        ice = ice + spend\r\n    end\r\n    print(\"ICE: \"..(ice/1000000)..\"ms\")\r\nend)","resultpending-to-change#Result(PENDING TO CHANGE)":"ICE: 100.24ms"}},"/icMySQL/Benchmark/Without-Cache":{"title":"Benchmark With Cache","data":{"":"AquÃ­ vamos a mostrar cuanto consume las consultas realizadas a una base de datos mysql sin utilizar nuestro sistema de cache.\r\nObviamente estoy podria variar mucho dependiendo de los componentes del ordenador que realice las operaciones.","code#Code":"Citizen.CreateThread(function()\r\n    local times = 10000\r\n    for i=0, times do\r\n        local startTime = os.nanotime()\r\n        local result = exports[\"ice_mysql\"]:AwaitSelect(1, \"SELECT name FROM players WHERE id=?\", {3}, false)\r\n        local endTime = os.nanotime()\r\n        local spend = endTime - startTime\r\n        ice = ice + spend\r\n    end\r\n    print(\"ICE: \"..(ice/1000000)..\"ms\")\r\nend)","resultpending-to-change#Result(PENDING TO CHANGE)":"ICE: 2141.82s"}},"/icMySQL/Features/AwaitAsync":{"title":"Await and Async Support","data":{"description#Description":"In the functions that make queries to the database, you can now use the await keyword to wait for the query to finish and get the result, this is useful when you want to make a query and get the result in the same function, without having to use callbacks or promises.","asynchronous-scheme#Asynchronous Scheme":"This scheme is going to explain how asynchronous queries work in the script. This explication is based on JS so probably it's not going to be 100% accurate but it's going to be enough to understand how it works.","steps#Steps":"First we declare some vars to use later in the code.\nWe execute the console.log function.\nWe execute the query function, and we send a param as the callback function to be executed later.\nWe execute another console.log function.","call-stack#Call Stack":"The call stack is like a list of tasks that a computer keeps track of while running a program. When a function is called, it gets added to the top of the stack. As the function completes, it's removed from the top.\r\nIn this case as you can see the first step is an anonymous function because JS don't have a main function so all the code is executed inside an anonymous function. Then we have the console.log function, then the query function that register a callback in C++ APIs and when the query is finished the callback is added to the event loop that wait for the call stack to be empty to add the callback to the main thread and execute it. Then we have another console.log function and finally the anonymous function is removed from the call stack.","conclusion#Conclusion":"So as we see the async functions execute in the main thread, but the callback is executed in another thread, so the main thread is not blocked while the query is being executed. That explains why the console.log function is execute before the query callback that is previous at the function.","synchronous-scheme#Synchronous Scheme":"This scheme is going to explain how synchronous queries work in the script. This explication is based on JS so probably it's not going to be 100% accurate but it's going to be enough to understand how it works.","call-stack-1#Call Stack":"As you can see in this scheme the call stack is the same as the async scheme, but in this case the main thread is blocked while the query is being executed, so the console.log function is executed after the query callback.","use#Use":"You don't have to make anything special to use this feature as this is already implmented in the script, you just have to make the queries as you would do normally, the script will take care of the rest.","files#Files":"This is the list of the involved files in this feature to help any developer to understand how it works:\nsrc/db/Query.js\nsrc/db/[Select, Insert, Delete...].lua\nsrc/db/Params.lua","warn#Warn":"I am not a professional developer so some explanations may not be 100% correct but I have made an effort to document myself and make these schematics so that you can understand how synchronous and asynchronous functions work. If you have any suggestion to improve the explanation, or anything, it will be well received."}},"/icMySQL/Features/BackupSystem":{"title":"Backup System","data":{"description#Description":"System that allows you to backup your database in a simple way, it will create a folder in the specified path in the config.js with the value of Config.BackupDirPath, then it will create a file with the current date, time and database name, the file will contain the database backup in sql format.","use#Use":"To use this system you have to enable this options Config.BackupEnabled in the config.js, specify the mysqldump.exe path in Config.MysqlDumpPath and the backup directory path in Config.BackupDirPath respective to the FXServer.exe file. Then you have to set the days in an array format, for example: if you want to set to make the backup the 2, 5, 10 days of each month you have to set: Config.Days = [2, 5, 10];.\r\nTo set the hour you have to make sure to type in 24h format, for example: if you want to set the backup to 2:00 AM you have to set Config.Hour = \"02:00\";.","files#Files":"This is the list of the involved files in this feature to help any developer to understand how it works:\nsrc/db/backup/index.js"}},"/icMySQL/Features/BasicCache":{"title":"Basic Connection Cache System","data":{"description#Description":"This is a very basic system to keep alive multiple connections of one database and make queries to them. For example for each database the script will create the neccessary connections and will keep them alive to make queries to them. This is very useful to reduce time of creating a new connection from the pool, an example of that is for example when you make a query, the script will create a new connection from the pool if there isn't available connection, once the query has ended the connection keeps stored in an array an is waiting for other queries, you can change the max connection limit in the config.js, by default the max connection limit is 15.","video#Video":"","use#Use":"You don't have to make anything special to use this feature as this is already implmented in the script, you just have to make the queries as you would do normally, the script will take care of the rest.","files#Files":"This is the list of the involved files in this feature to help any developer to understand how it works:\nsrc/db/Connections.js\nsrc/db/Query.lua"}},"/icMySQL/Features/BasicErrorSystem":{"title":"Error System","data":{"description#Description":"We made this system thinking about the person that have an error that don't understand why it happens, so we made this system to help them to understand what is happening and giving a possible solution before they ask for help.","use#Use":"To enable this system you have to set the Config.ShowErrorSolution variable to true in the src/config.js file. If you want the description of the error to be shown in the console, you have to set the Config.ShowErrorDescription variable to true in the src/config.js file.","how-it-works#How it works":"When a error happens in any part of the code, the ErrorParser() function will search in the ErrorList a solution for that error, before that it will send a warn to discord webhook then a log error will be saved in the log file.\r\nHere there's an example of bad user specified, and in the right you can see what the user will see in the console or in the discord webhook:","files#Files":"This is the list of the involved files in this feature to help any developer to understand how it works:\nsrc/errors/Parser.js\nsrc/errors/List.js"}},"/icMySQL/Features/DiscordLogs":{"title":"Discord Logs","data":{"description#Description":"The discord logs system is a way to log all the mysql involved information in a discord channel.","use#Use":"To use this system you have to enable this options Config.DiscordLogs in the config.js and specify the webhook url in Config.DiscordWebhook, then you have some options to enable if you want to send some information.","files#Files":"This is the list of the involved files in this feature to help any developer to understand how it works:\nsrc/utils/Discord.js"}},"/icMySQL/Features/CacheSystem":{"title":"Cache System","data":{"description#Description":"The cache system if a efficient mode to make only necessary queries to databases, that save the new data in a cache and if the data is already in the cache it will not make a new query to the database. This feature is very useful to make a lot of queries to the database without having to worry about the performance of the server.\r\nUsing this feature you will save more than the 50% of the time that you use to make queries to the database. If you have made any change to the database for example making a Update query the cache data will be removed and the next time that you make a query to the database it will be saved in the cache again.","video#Video":"","use#Use":"To use this feature you don't have to do anything, by default is applied in the default query functions, if there's a reason to disable it you can do it by passing a false value after the function param.\r\nExample to disable cache:\nMySQL.Select(1, \"SELECT name FROM players WHERE id = ?\". {3}, function(result)\r\n    print(result) -- Output: Daniel\r\nend, false)","files#Files":"This is the list of the involved files in this feature to help any developer to understand how it works:\nsrc/db/Query.lua"}},"/icMySQL/Features/ChangeOtherSystem":{"title":"Change to our functions","data":{"description#Description":"We have made a small program to replace other systems functions to our functions, this is to make easier to a developer to change from other system to our system.","warn#Warn":"Make sure to make a backup of the resources folder before use this program, we are not responsible for any damage that this program can do to your files. Obviously the program isn't going to delete your server but probably some functions don't work because the program probably don't replace functions correctly.","use#Use":"To use you have to open a command prompt in this path: ice_mysql/library when you're in that dir, you can type library-changer.exe <resources-path> and it will change all the functions to our functions.\r\nExample:library-changer.exe \"C:\\Users\\DanielGP\\Desktop\\FivemServer\\resources\".","how-it-works#How it works":"The program iterates all the files in the path that you have given, and it will be finding all funtions from other system and replace with our functions.","files#Files":"This is the list of the involved files in this feature to help any developer to understand how it works:\nlibrary/library-changer/*"}},"/icMySQL/Features/LogsSystem":{"title":"Log System","data":{"description#Description":"This is a simple log system that will log all the relevant information and save in a file in the IceMySQL/Logs folder by default, the file will be named with the current date and time, so you can have a log file for each server restart.\r\nIn the log file at the first you could see some relevent component information about the hardware so if you have any problem related to the mysql script you can provide this information to the developer to help him to understand what is going on.","use#Use":"This is always in use, you don't have to make anything.","files#Files":"This is the list of the involved files in this feature to help any developer to understand how it works:\nsrc/utils/Logger.js"}},"/icMySQL/Features/ErrorHandling":{"title":"Error Handling","data":{"description#Description":"We've put a lot of effort into making sure that the API is as robust as possible. We've tried to make sure that the API is as informative as possible when it comes to errors. If you get an error, you should be able to figure out what went wrong and how to fix it. If you get an error that you don't understand, please let us know and we'll try to fix it.","files#Files":"This is the list of the involved files in this feature to help any developer to understand how it works:\nsrc/*"}},"/icMySQL/Features/MongoDB":{"title":"Mongo DB Support","data":{"description#Description":"We've added the support to Mongo DB, so you can use it as a database, you can mix it with other SQL & non-SQL databases. The multi-database support is a feature that you can use in SQL & non-SQL databases.","use#Use":"To use is the same as the other databases, you just need to enable this option in the config.js Config.MongoDB and provide the credentials in the server.cfg like this:\nset mongoCredentials_1 \"mongodb://localhost:27017/test\"\nAs you can see is the same structure like mysql you have to specify the id of the database because we've provided multiple database support here, then the database will be connected automatically on the server start.\r\nFunction list:\nMongo.MongoInsert(dbID, options, callback);\r\nMongo.MongoFind(dbID, options, callback);\r\nMongo.MongoUpdate(dbID, options, callback);\r\nMongo.MongoCount(dbID, options, callback);\r\nMongo.MongoDelete(dbID, options, callback);","params#Params":"dbID(optional) is the database ID that you want to use, by default the database ID is 1, you can change it in the config.js Config.DefaultMongoDB, this parameter is optional so if you don't specify that it will work.\noptions(*) is the options that you want to make in the query, above where're going to explain you how it works and some examples, but you can find the options in the MongoDB Documentation.\ncallback(optional) is the function that will be called when the query is finished, if the callback is not specified the query will be executed and it will be as an await function.","examples#Examples":"","insert#Insert":"local result = exports[\"ice_mysql\"]:MongoInsert(1, {\r\n    collection = \"users\",\r\n    documents = {\r\n        [\"name\"] = \"Daniel\"\r\n    }\r\n});","find#Find":"local result = exports[\"ice_mysql\"]:MongoFind(1, {\r\n    collection = \"users\",\r\n    query = {\r\n        [\"name\"] = \"Daniel\"\r\n    }\r\n});","update#Update":"local result = exports[\"ice_mysql\"]:MongoUpdate(1, {\r\n    collection = \"users\",\r\n    query = {\r\n        [\"name\"] = \"Daniel\"\r\n    },\r\n    update = {\r\n        [\"$set\"] = {\r\n            [\"name\"] = \"Daniel2\"\r\n        }\r\n    }\r\n});","count#Count":"local result = exports[\"ice_mysql\"]:MongoCount(1, {\r\n    collection = \"users\",\r\n});","delete#Delete":"local result = exports[\"ice_mysql\"]:MongoDelete(1, {\r\n    collection = \"users\",\r\n    query = {\r\n        [\"name\"] = \"Daniel2\"\r\n    }\r\n});","files#Files":"This is the list of the involved files in this feature to help any developer to understand how it works:\nsrc/db/mongo/*.js"}},"/icMySQL/Features/MultipleDB":{"title":"Multiple DB","data":{"description#Description":"The multiple DB feature make it possible to use multiple databases in a single server. This feature is useful when you want to separate the data of each user or when you want to separate the data of each service. For example if you ban a user in a database you can share that database with multiple servers and the user will be banned in all of them. Other example you have a data and you want to share it with multiple servers, in this case it can be bought coins, items, or other data.","use#Use":"To use this feature you have to specify the databases credentials in the server.cfg, for example:\nset mysqlCredentials_1 \"host=127.0.0.1;user=root; password=1234; database=fxserver; port=3306\"\r\nset mysqlCredentials_2 \"host=127.0.0.1;user=root; password=1234; database=fxserver; port=3306\"\nOnce you have specified the databases when the server start in the console you will see a message that tell you if the script has connected to each DB correctly.\r\nTo use you have to specify the database number in the function that you want to use as the first parameter, for example to make a select in the database 2:\nMySQL.Select(2, \"SELECT name FROM players WHERE id = ?\". {3}, function(result)\r\n    print(result) -- Output: Daniel\r\nend)","files#Files":"This is the list of the involved files in this feature to help any developer to understand how it works:\nsrc/db/Connections.js\nsrc/db/Query.lua\nsrc/db/Reader.js"}},"/icMySQL/Features/NamedParameters":{"title":"Named and placeholder parameters","data":{"description#Description":"This make possible to use named and placeholder parameters in the queries.\r\nThis approach offers several benefits, such as preventing SQL injection attacks and improving code readability.","use#Use":"","examples#Examples":"Example 1: Using \"@\" as a prefix for named placeholders:\r\nIn this example, \"@\" is used as a prefix for named placeholders. The query retrieves the name of a player with ID 3.\nMySQL.Select(\"SELECT name FROM players WHERE id = @id\", {\r\n    [\"@id\"] = 3\r\n})\nExample 2: Using \":\" as a prefix for named placeholders:Here, \":\" is used as a prefix for named placeholders. The query also retrieves the name of a player with ID 3.\nMySQL.Select(\"SELECT name FROM players WHERE id = :id\", {\r\n    [\"id\"] = 3\r\n})\nExample 3: Using \"?\" as anonymous placeholders:In this example, anonymous placeholders \"?\" are used instead of named placeholders. The values are then provided in the same order as they appear in the query. The query retrieves the name of a player with ID 3 and the name \"Daniel\".\nMySQL.Select(\"SELECT name FROM players WHERE id = ? AND name = ?\", {\r\n    3,\r\n    \"Daniel\"\r\n})","files#Files":"This is the list of the involved files in this feature to help any developer to understand how it works:\nsrc/db/Queries.js\nsrc/db/Params.js"}},"/icMySQL/Features/ORM":{"title":"ORM(Object Relational Mapping)","data":{"description#Description":"ORM, or Object-Relational Mapping, is a technique that helps software developers work smoothly with databases. It acts as a translator between the object-oriented code we write and the tables in a relational database. Instead of dealing with complex database queries, we define our data as programming objects, and ORM takes care of converting them into database operations. This simplifies coding, improves readability, and makes database interaction more intuitive. It's like having a helper that understands both programming and databases, making our work easier and more efficient.","how-it-works#How it works":"The ORM system that we have is bassed in sequelize package from nodejs, this package is a promise-based Node.js ORM for Postgres, MySQL, MariaDB, SQLite and Microsoft SQL Server. It features solid transaction support, relations, eager and lazy loading, read replication and more.\r\nWhen the script first load find all connections in the server.cfg when the script test that the connection is establish it will dump all the database structure in src/db/orm/models folder, for example if you have a database with id 3, the folder will be created in src/db/orm/models/3, in that folder you don't have to touch anything, but make sure that when the database structure change the models need to be updated, you can do it by removing the folder and restarting the script, the script will create the folder again with the new structure.\r\nOnce the script have writed correctly the sctructure in that folder you can use all the functions that we provide to make the queries, the script will take care of the rest.\r\nHere we're going to give to you an example of how it works.","use#Use":"To use this system make sure that you have enabled in config.js at Config.ORM once you have enabled this the script at the first start it will print some messages noticing you how many databases have been found and how many models have been created, once the script have created the models you can use the functions that we provide to make the queries, here we're going to give to you all the list of functions.\nMySQL.ORM.FindAll(databaseID, table, options, callback)\nMySQL.ORM.FindOne(databaseID, table, options, callback)\nMySQL.ORM.FindById(databaseID, table, id, callback)\nMySQL.ORM.FindAndCountAll(databaseID, table, options, callback)\nMySQL.ORM.Create(databaseID, table, options, callback)\nMySQL.ORM.Modify(databaseID, table, values, options, callback)\nMySQL.ORM.Destroy(databaseID, table, options, callback)\nMySQL.ORM.Count(databaseID, table, options, callback)\nMySQL.ORM.Max(databaseID, table, field, options, callback)\nMySQL.ORM.Min(databaseID, table, field, options, callback)\nMySQL.ORM.Sum(databaseID, table, field, options, callback)\nMySQL.ORM.Increment(databaseID, field, table, options, callback)\nMySQL.ORM.Decrement(databaseID, field, table, options, callback)\nMySQL.ORM.BulkCreate(databaseID, table, values, options, callback)\r\nIn all the functions we provide callbacks if you want to use the function as synchronous you just need to remove the callback and the function will return the result, for example:\nconst result = MySQL.ORM.FindAll(1, \"users\", {\r\n    where: {\r\n        name: \"Daniel\"\r\n    }\r\n});","files#Files":"This is the list of the involved files in this feature to help any developer to understand how it works:\nsrc/db/Query.js\nsrc/db/orm/index.js\nsrc/db/orm/models/index.js","warn#Warn":"I am not a professional developer so some explanations may not be 100% correct but I have made an effort to document myself and make these schematics so that you can understand how ORM system of sequelize work. If you have any suggestion to improve the explanation, or anything, it will be well received."}},"/icMySQL/Features/Redis":{"title":"Redis Support","data":{"description#Description":"We've added the support for Redis, this is a database that works with key-value, it's very fast and it's used for cache, we've added the support for this database because it's very useful for some things like save in memory data that need to be accessed very fast.","use#Use":"To use this feature you need to enable the Config.Redis option in the config.js file, then you have to provide the redis credentials in the server.cfg file like this:\nset redisCredentials \"redis://user:password@127.0.0.1:6379/0\"\nWhen the server start if the credentials are correct the resource will connect to the database and it will be ready to use.\r\nFunctions List:\nRedis.Get(key, callback);\r\nRedis.Set(key, values, callback);\r\nRedis.Del(key, callback);\r\nRedis.Exist(key, callback);\r\nRedis.Expire(key, seconds, callback);\r\nRedis.Update(key, value, callback);\r\nRedis.Flush(callback);\r\nRedis.Keys(pattern, callback);\r\nRedis.MGet(keys, callback);\r\nRedis.Close();\r\nRedis.Open();\r\nRedis.Reload();","params#Params":"key/s(*) is the key or keys that you want to use in the query, if you want to use more than one key you have to use an array of keys.\nvalues(depending) is the value or values that you want to set in an entry, if you want to use more than one value you have to use an array of values.\ncallback(optional) is the function that will be called when the data or function is finished, if the callback is not specified the query will be executed and it will be as an await function.","examples#Examples":"","set#Set":"local result = exports[\"ice_mysql\"]:RedisSet(\"name\", \"Daniel\");\r\n-- OK","update#Update":"local result = exports[\"ice_mysql\"]:RedisUpdate(\"name\", \"Daniel3\");\r\n-- OK","get#Get":"local result = exports[\"ice_mysql\"]:RedisGet(\"name\");\r\n-- Daniel3","delete#Delete":"local result = exports[\"ice_mysql\"]:RedisDel(\"name\");\r\n-- OK","flush#Flush":"local result = exports[\"ice_mysql\"]:RedisFlush();\r\n-- OK","files#Files":"This is the list of the involved files in this feature to help any developer to understand how it works:\nsrc/db/redis/index.js"}},"/icMySQL/Features/ScriptUpdater":{"title":"Auto Update","data":{"description#Description":"The ice mysql have a system to auto update if there is a new available version it will download the script and replace the necessary files, the config.js will be kipped and not will be replaced.","use#Use":"If you want to use the system you only have to enable these options in the config.js file: Config.CheckForUpdates and Config.AutoUpdate.","warn#Warn":"Make sure that the FXServer process has permission to create directories and rename directories by default you will not have any problem with this.","files#Files":"This is the list of the involved files in this feature to help any developer to understand how it works:\nsrc/utils/Updater.js"}},"/icMySQL/Features/SupportLuaJSCS":{"title":"Lua, JS, C# library support","data":{"description#Description":"We made compatible the ice mysql script compatible with Lua, JS and C# libraries, so you can use the same script in any of these languages.\r\nObviously, you can call the script exports from any language, but this feature is to make it easier to use and read.","use#Use":"","lua#Lua":"fxmanifest.lua\nserver_script '@ice_mysql/library/MySQL.lua'\nserver.lua\nMySQL.Select()...","js#JS":"fxmanifest.lua\nserver_script '@ice_mysql/library/MySQL.js'\nserver.js\nMySQL.Select()...","c#C#":"In the server project you have to add a dependency to the MySQL.net.dll file, path: ice_mysql/library/MySQL.net.dll\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Threading.Tasks;\r\nusing CitizenFX.Core;\r\nusing MySQL.Server;\r\nusing Newtonsoft.Json;\r\n\r\nnamespace test_csharp.Server\r\n{\r\n    public class ServerMain : BaseScript\r\n    {\r\n        public MySQL.Server.MySQL mySqlInstance;\r\n        public ServerMain()\r\n        {\r\n            mySqlInstance = new MySQL.Server.MySQL();\r\n        }\r\n\r\n        public async Task PruebaSelect()\r\n        {\r\n            var result = await mySqlInstance.AwaitSelect(1, \"SELECT name FROM players WHERE id=@id\", new Dictionary<string, object> { { \"@id\", 3 } }, true);\r\n            string json = JsonConvert.SerializeObject(result);\r\n\r\n            Debug.WriteLine(json);\r\n        }\r\n    }\r\n}","how-it-works#How it works":"We've just maded a dependency for each language, in the case of C# we've made a small lib that make the same as the other language, call the exports of the script and return the result.","files#Files":"This is the list of the involved files in this feature to help any developer to understand how it works:\nsrc/errors/Parser.js\nsrc/errors/List.js"}},"/icMySQL/Functions/Mongo/Count":{"title":"Count","data":{"":"The count function is to get the count of data in the specified table of the database.","params#Params":"Database ID (OPTIONAL) is to specify for what database is the query to. By default it take DB#1 you can change the default DB in the config.js.\nParams(*) the query to execute.\nFunction(*) is the function that will be executed when the query is finished.","return#Return":"The mongo functions never return any value, always execute the provided callback","functions#Functions":"exports[\"ice_mysql\"]:MongoCount(database, params, function)\nMySQL.MongoCount(database, params, function)","use#Use":"If you want to make the query to execute in the main thread you have to specify a simple function like this: () => {} to do anything depending on the language.\nMySQL.Mongo.MongoCount(1, {\r\n    collection = \"users\",\r\n    query = {\r\n        [\"name\"] = \"kDex\"\r\n    },\r\n}, function(result)\r\n    print(json.encode(result));\r\nend);\nMySQL.Mongo.MongoCount(1, {\r\n    collection: \"users\",\r\n    query: {\r\n        name: \"kDex\"\r\n    }\r\n}, function(result) {\r\n    console.log(JSON.stringify(result));\r\n});\nDictionary<string, object> data = new Dictionary<string, object>\r\n{\r\n    { \"collection\", \"users\" },\r\n    { \"query\", new Dictionary<string, object>\r\n        {\r\n            { \"name\", \"kDex\" }\r\n        }\r\n    }\r\n};\r\nMySQL.MongoCount(1, data, (result) => {\r\n    Console.WriteLine(result)\r\n})"}},"/icMySQL/Functions/Mongo/Delete":{"title":"Delete","data":{"":"The Delete function is to remove data in the specified table of the database.","params#Params":"Database ID (OPTIONAL) is to specify for what database is the query to. By default it take DB#1 you can change the default DB in the config.js.\nParams(*) the query to execute.\nFunction(*) is the function that will be executed when the query is finished.","return#Return":"The mongo functions never return any value, always execute the provided callback","functions#Functions":"exports[\"ice_mysql\"]:MongoDelete(database, params, function)\nMySQL.MongoDelete(database, params, function)","use#Use":"If you want to make the query to execute in the main thread you have to specify a simple function like this: () => {} to do anything depending on the language.\nMySQL.Mongo.MongoDelete(1, {\r\n    collection = \"users\",\r\n    query = {\r\n        [\"name\"] = \"kDex\"\r\n    },\r\n}, function(result)\r\n    print(json.encode(result));\r\nend);\nMySQL.Mongo.MongoDelete(1, {\r\n    collection: \"users\",\r\n    query: {\r\n        name: \"kDex\"\r\n    }\r\n}, function(result) {\r\n    console.log(JSON.stringify(result));\r\n});\nDictionary<string, object> data = new Dictionary<string, object>\r\n{\r\n    { \"collection\", \"users\" },\r\n    { \"query\", new Dictionary<string, object>\r\n        {\r\n            { \"name\", \"kDex\" }\r\n        }\r\n    }\r\n};\r\nMySQL.MongoDelete(1, data, (result) => {\r\n    Console.WriteLine(result)\r\n})"}},"/icMySQL/Functions/Mongo/Find":{"title":"Find","data":{"":"The find function is to search data in the specified table of the database.","params#Params":"Database ID (OPTIONAL) is to specify for what database is the query to. By default it take DB#1 you can change the default DB in the config.js.\nParams(*) the query to execute.\nFunction(*) is the function that will be executed when the query is finished.","return#Return":"The mongo functions never return any value, always execute the provided callback","functions#Functions":"exports[\"ice_mysql\"]:MongoFind(database, params, function)\nMySQL.MongoInsert(database, params, function)","use#Use":"If you want to make the query to execute in the main thread you have to specify a simple function like this: () => {} to do anything depending on the language.\nMySQL.Mongo.MongoFind(1, {\r\n    collection = \"users\",\r\n    query = {\r\n        [\"name\"] = \"DanielGP\"\r\n    },\r\n}, function(result)\r\n    print(json.encode(result));\r\nend);\nMySQL.Mongo.MongoFind(1, {\r\n    collection: \"users\",\r\n    query: {\r\n        name: \"DanielGP\"\r\n    }\r\n}, function(result) {\r\n    console.log(JSON.stringify(result));\r\n});\nDictionary<string, object> data = new Dictionary<string, object>\r\n{\r\n    { \"collection\", \"users\" },\r\n    { \"query\", new Dictionary<string, object>\r\n        {\r\n            { \"name\", \"DanielGP\" }\r\n        }\r\n    }\r\n};\r\nMySQL.MongoFind(1, data, (result) => {\r\n    Console.WriteLine(result)\r\n})"}},"/icMySQL/Functions/Mongo/Insert":{"title":"Insert","data":{"":"The insert function is to insert data in the specified table of the database.","params#Params":"Database ID (OPTIONAL) is to specify for what database is the query to. By default it take DB#1 you can change the default DB in the config.js.\nParams(*) the query to execute.\nFunction(*) is the function that will be executed when the query is finished.","return#Return":"The mongo functions never return any value, always execute the provided callback","functions#Functions":"exports[\"ice_mysql\"]:MongoInsert(database, params, function)\nMySQL.MongoInsert(database, params, function)","use#Use":"If you want to make the query to execute in the main thread you have to specify a simple function like this: () => {} to do anything depending on the language.\nMySQL.Mongo.MongoInsert(1, {\r\n    collection = \"users\",\r\n    documents = {\r\n        [\"name\"] = \"kDex\"\r\n    },\r\n}, function(result)\r\n    print(json.encode(result));\r\nend);\nMySQL.Mongo.MongoInsert(1, {\r\n    collection: \"users\",\r\n    documents: {\r\n        name: \"kDex\"\r\n    }\r\n}, function(result) {\r\n    console.log(JSON.stringify(result));\r\n});\nDictionary<string, object> data = new Dictionary<string, object>\r\n{\r\n    { \"collection\", \"users\" },\r\n    { \"documents\", new Dictionary<string, object>\r\n        {\r\n            { \"name\", \"kDex\" }\r\n        }\r\n    }\r\n};\r\nMySQL.MongoInsert(1, data, (result) => {\r\n    Console.WriteLine(result)\r\n})"}},"/icMySQL/Functions/Mongo/Update":{"title":"Update","data":{"":"The update function is to replace data in the specified table of the database.","params#Params":"Database ID (OPTIONAL) is to specify for what database is the query to. By default it take DB#1 you can change the default DB in the config.js.\nParams(*) the query to execute.\nFunction(*) is the function that will be executed when the query is finished.","return#Return":"The mongo functions never return any value, always execute the provided callback","functions#Functions":"exports[\"ice_mysql\"]:MongoUpdate(database, params, function)\nMySQL.MongoUpdate(database, params, function)","use#Use":"If you want to make the query to execute in the main thread you have to specify a simple function like this: () => {} to do anything depending on the language.\nMySQL.Mongo.MongoUpdate(1, {\r\n    collection = \"users\",\r\n    query = {\r\n        [\"name\"] = \"kDex\"\r\n    },\r\n    update = {\r\n        [\"$set\"] = {\r\n            [\"name\"] = \"kDex2\"\r\n        }\r\n    },\r\n}, function(result)\r\n    print(json.encode(result));\r\nend);\nMySQL.Mongo.MongoUpdate(1, {\r\n    collection: \"users\",\r\n    query: {\r\n        name: \"kDex\"\r\n    },\r\n    update: {\r\n        \"$set\": {\r\n            name: \"kDex2\"\r\n        }\r\n    }\r\n}, function(result) {\r\n    console.log(JSON.stringify(result));\r\n});\nDictionary<string, object> data = new Dictionary<string, object>\r\n{\r\n    { \"collection\", \"users\" },\r\n    { \"query\", new Dictionary<string, object>\r\n        {\r\n            { \"name\", \"kDex\" }\r\n        }\r\n    },\r\n    { \"update\", new Dictionary<string, object>\r\n        {\r\n            { \"$set\", new Dictionary<string, object>\r\n                {\r\n                    { \"name\", \"kDex2\" }\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\nMySQL.MongoUpdate(1, data, (result) => {\r\n    Console.WriteLine(result)\r\n})"}},"/icMySQL/Functions/MySQL/Delete":{"title":"Delete","data":{"":"The insert function is to insert data in the specified table of the database.","params#Params":"Database ID (OPTIONAL) is to specify for what database is the query to. By default it take DB#1 you can change the default DB in the config.js.\nQuery(*) the query to execute.\nValues(OPTIONAL) the values that will be replaced in the query, these are ?, @, :, etc.\nFunction(OPTIONAL) is the function that will be executed when the query is finished.\nCache(OPTIONAL) is to specify if the query want to use the cache system, by default is activated this only may be disabled if there're problems with the cache system.","return#Return":"If you've specified a function it will return the result of the query in the function, if not it will return the result of the query.","functions#Functions":"exports[\"ice_mysql\"]:Delete(database, query, values, function, cache)\nexports[\"ice_mysql\"]:AwaitDelete(database, query, values, function, cache)\nMySQL.Delete(database, query, values, function, cache)\nMySQL.AwaitDelete(database, query, values, function, cache)","use#Use":"","awaitable#Awaitable":"local result = MySQL.AwaitDelete(1, \"DELETE FROM players WHERE name=@name\", {\r\n    [\"@name\"] = \"Daniel\"\r\n})\nconst result = await MySQL.AwaitDelete(1, \"DELETE FROM players WHERE name=@name\", [\r\n    [\"@name\"] = \"Daniel\",\r\n])\nvar result = await MySQL.AwaitDelete(1, \"DELETE FROM players WHERE name=@name\", new Dictionary<string, object>() {\r\n    [\"@name\"] = \"Daniel\",\r\n})","callback#Callback":"Callback will return the same as the awaitable function but in the callback function.\nIf the callback is not provided it will return the same as the awaitable function.\nIf you want to make the query to execute in the main thread you have to specify a simple function like this: () => {} to do anything depending on the language.\nMySQL.Delete(1, \"DELETE FROM players WHERE name=@name\", {\r\n    [\"@name\"] = \"Daniel\",\r\n}, function(result)\r\n    print(result)\r\nend)\nawait MySQL.Delete(1, \"DELETE FROM players WHERE name=@name\", [\r\n    [\"@name\"] = \"Daniel\",\r\n], (result) => {\r\n    console.log(result)\r\n})\nMySQL.Delete(1, \"DELETE FROM players WHERE name=@name\", new Dictionary<string, object>() {\r\n    [\"@name\"] = \"Daniel\",\r\n}, (result) => {\r\n    Console.WriteLine(result)\r\n})"}},"/icMySQL/Functions/MySQL/Insert":{"title":"Insert","data":{"":"The insert function is to insert data in the specified table of the database.","params#Params":"Database ID (OPTIONAL) is to specify for what database is the query to. By default it take DB#1 you can change the default DB in the config.js.\nQuery(*) the query to execute.\nValues(OPTIONAL) the values that will be replaced in the query, these are ?, @, :, etc.\nFunction(OPTIONAL) is the function that will be executed when the query is finished.\nCache(OPTIONAL) is to specify if the query want to use the cache system, by default is activated this only may be disabled if there're problems with the cache system.","return#Return":"If you've specified a function it will return the result of the query in the function, if not it will return the result of the query.\r\nIn this case it will return the insert id of the query.","functions#Functions":"exports[\"ice_mysql\"]:Insert(database, query, values, function, cache)\nexports[\"ice_mysql\"]:AwaitInsert(database, query, values, function, cache)\nMySQL.Insert(database, query, values, function, cache)\nMySQL.AwaitInsert(database, query, values, function, cache)","use#Use":"","awaitable#Awaitable":"local result = MySQL.AwaitInsert(1, \"INSERT INTO `players` (`name`, `age`) VALUES (@name, @age)\", {\r\n    [\"@name\"] = \"John\",\r\n    [\"@age\"] = 18\r\n})\nconst result = await MySQL.AwaitInsert(1, \"INSERT INTO `players` (`name`, `age`) VALUES (@name, @age)\", [\r\n    [\"@name\"] = \"John\",\r\n    [\"@age\"] = 18\r\n])\nvar result = await MySQL.AwaitInsert(1, \"INSERT INTO `players` (`name`, `age`) VALUES (@name, @age)\", new Dictionary<string, object>() {\r\n    [\"@name\"] = \"John\",\r\n    [\"@age\"] = 18\r\n})","callback#Callback":"Callback will return the same as the awaitable function but in the callback function.\nIf the callback is not provided it will return the same as the awaitable function.\nIf you want to make the query to execute in the main thread you have to specify a simple function like this: () => {} to do anything depending on the language.\nMySQL.Insert(1, \"INSERT INTO `players` (`name`, `age`) VALUES (@name, @age)\", {\r\n    [\"@name\"] = \"John\",\r\n    [\"@age\"] = 18\r\n}, function(result)\r\n    print(result)\r\nend)\nawait MySQL.Insert(1, \"INSERT INTO `players` (`name`, `age`) VALUES (@name, @age)\", [\r\n    [\"@name\"] = \"John\",\r\n    [\"@age\"] = 18\r\n], (result) => {\r\n    console.log(result)\r\n})\nMySQL.Insert(1, \"INSERT INTO `players` (`name`, `age`) VALUES (@name, @age)\", new Dictionary<string, object>() {\r\n    [\"@name\"] = \"John\",\r\n    [\"@age\"] = 18\r\n}, (result) => {\r\n    Console.WriteLine(result)\r\n})"}},"/icMySQL/Functions/MySQL/Query":{"title":"Query","data":{"":"The insert function is to insert data in the specified table of the database.","params#Params":"Database ID (OPTIONAL) is to specify for what database is the query to. By default it take DB#1 you can change the default DB in the config.js.\nQuery(*) the query to execute.\nValues(OPTIONAL) the values that will be replaced in the query, these are ?, @, :, etc.\nFunction(OPTIONAL) is the function that will be executed when the query is finished.\nCache(OPTIONAL) is to specify if the query want to use the cache system, by default is activated this only may be disabled if there're problems with the cache system.","return#Return":"If you've specified a function it will return the result of the query in the function, if not it will return the result of the query.\r\nIn this case it will return all the data matched.","functions#Functions":"exports[\"ice_mysql\"]:Query(database, query, values, function, cache)\nexports[\"ice_mysql\"]:AwaitQuery(database, query, values, function, cache)\nMySQL.Query(database, query, values, function, cache)\nMySQL.AwaitQuery(database, query, values, function, cache)","use#Use":"","awaitable#Awaitable":"local result = MySQL.AwaitQuery(1, \"SELECT name FROM players WHERE id=@id\", {\r\n    [\"@id\"] = 3\r\n})\nconst result = await MySQL.AwaitQuery(1, \"SELECT name FROM players WHERE id=@id\", [\r\n    [\"@id\"] = 3\r\n])\nvar result = await MySQL.AwaitQuery(1, \"SELECT name FROM players WHERE id=@id\", new Dictionary<string, object>() {\r\n    [\"@id\"] = 3\r\n})","callback#Callback":"Callback will return the same as the awaitable function but in the callback function.\nIf the callback is not provided it will return the same as the awaitable function.\nIf you want to make the query to execute in the main thread you have to specify a simple function like this: () => {} to do anything depending on the language.\nMySQL.Query(1, \"SELECT name FROM players WHERE id=@id\", {\r\n    [\"@id\"] = 3\r\n}, function(result)\r\n    print(result)\r\nend)\nawait MySQL.Query(1, \"SELECT name FROM players WHERE id=@id\", [\r\n    [\"@id\"] = 3\r\n], (result) => {\r\n    console.log(result)\r\n})\nMySQL.Query(1, \"SELECT name FROM players WHERE id=@id\", new Dictionary<string, object>() {\r\n    [\"@id\"] = 3\r\n}, (result) => {\r\n    Console.WriteLine(result)\r\n})"}},"/icMySQL/Functions/MySQL/Select":{"title":"Select","data":{"":"The insert function is to insert data in the specified table of the database.","params#Params":"Database ID (OPTIONAL) is to specify for what database is the query to. By default it take DB#1 you can change the default DB in the config.js.\nQuery(*) the query to execute.\nValues(OPTIONAL) the values that will be replaced in the query, these are ?, @, :, etc.\nFunction(OPTIONAL) is the function that will be executed when the query is finished.\nCache(OPTIONAL) is to specify if the query want to use the cache system, by default is activated this only may be disabled if there're problems with the cache system.","return#Return":"If you've specified a function it will return the result of the query in the function, if not it will return the result of the query.\r\nIn this case it will return the match data.","functions#Functions":"exports[\"ice_mysql\"]:Select(database, query, values, function, cache)\nexports[\"ice_mysql\"]:AwaitSelect(database, query, values, function, cache)\nMySQL.Select(database, query, values, function, cache)\nMySQL.AwaitSelect(database, query, values, function, cache)","use#Use":"","awaitable#Awaitable":"local result = MySQL.AwaitSelect(1, \"SELECT name FROM players WHERE id=@id\", {\r\n    [\"@id\"] = 3\r\n})\nconst result = await MySQL.AwaitSelect(1, \"SELECT name FROM players WHERE id=@id\", [\r\n    [\"@id\"] = 3\r\n])\nvar result = await MySQL.AwaitSelect(1, \"SELECT name FROM players WHERE id=@id\", new Dictionary<string, object>() {\r\n    [\"@id\"] = 3\r\n})","callback#Callback":"Callback will return the same as the awaitable function but in the callback function.\nIf the callback is not provided it will return the same as the awaitable function.\nIf you want to make the query to execute in the main thread you have to specify a simple function like this: () => {} to do anything depending on the language.\nMySQL.Select(1, \"SELECT name FROM players WHERE id=@id\", {\r\n    [\"@id\"] = 3\r\n}, function(result)\r\n    print(result)\r\nend)\nawait MySQL.Select(1, \"SELECT name FROM players WHERE id=@id\", [\r\n    [\"@id\"] = 3\r\n], (result) => {\r\n    console.log(result)\r\n})\nMySQL.Select(1, \"SELECT name FROM players WHERE id=@id\", new Dictionary<string, object>() {\r\n    [\"@id\"] = 3\r\n}, (result) => {\r\n    Console.WriteLine(result)\r\n})"}},"/icMySQL/Functions/MySQL/Single":{"title":"Single","data":{"":"The insert function is to insert data in the specified table of the database.","params#Params":"Database ID (OPTIONAL) is to specify for what database is the query to. By default it take DB#1 you can change the default DB in the config.js.\nQuery(*) the query to execute.\nValues(OPTIONAL) the values that will be replaced in the query, these are ?, @, :, etc.\nFunction(OPTIONAL) is the function that will be executed when the query is finished.\nCache(OPTIONAL) is to specify if the query want to use the cache system, by default is activated this only may be disabled if there're problems with the cache system.","return#Return":"If you've specified a function it will return the result of the query in the function, if not it will return the result of the query.\r\nIn this case it will return the number of affected rows.","functions#Functions":"exports[\"ice_mysql\"]:Single(database, query, values, function, cache)\nexports[\"ice_mysql\"]:AwaitSingle(database, query, values, function, cache)\nMySQL.Single(database, query, values, function, cache)\nMySQL.AwaitSingle(database, query, values, function, cache)","use#Use":"","awaitable#Awaitable":"local result = MySQL.AwaitSingle(1, \"SELECT name FROM players WHERE id=@id\", {\r\n    [\"@name\"] = \"Daniel\",\r\n    [\"@id\"] = 3\r\n})\nconst result = await MySQL.AwaitSingle(1, \"SELECT name FROM players WHERE id=@id\", [\r\n    [\"@name\"] = \"Daniel\",\r\n    [\"@id\"] = 3\r\n])\nvar result = await MySQL.AwaitSingle(1, \"SELECT name FROM players WHERE id=@id\", new Dictionary<string, object>() {\r\n    [\"@name\"] = \"Daniel\",\r\n    [\"@id\"] = 3\r\n})","callback#Callback":"Callback will return the same as the awaitable function but in the callback function.\nIf the callback is not provided it will return the same as the awaitable function.\nIf you want to make the query to execute in the main thread you have to specify a simple function like this: () => {} to do anything depending on the language.","lua#LUA":"MySQL.Single(1, \"SELECT name FROM players WHERE id=@id\", {\r\n    [\"@name\"] = \"Daniel\",\r\n    [\"@id\"] = 3\r\n}, function(result)\r\n    print(result)\r\nend)","js#JS":"await MySQL.Single(1, \"SELECT name FROM players WHERE id=@id\", [\r\n    [\"@name\"] = \"Daniel\",\r\n    [\"@id\"] = 3\r\n], (result) => {\r\n    console.log(result)\r\n})","c#C#":"MySQL.Single(1, \"SELECT name FROM players WHERE id=@id\", new Dictionary<string, object>() {\r\n    [\"@name\"] = \"Daniel\",\r\n    [\"@id\"] = 3\r\n}, (result) => {\r\n    Console.WriteLine(result)\r\n})"}},"/icMySQL/Functions/MySQL/Update":{"title":"Update","data":{"":"The insert function is to insert data in the specified table of the database.","params#Params":"Database ID (OPTIONAL) is to specify for what database is the query to. By default it take DB#1 you can change the default DB in the config.js.\nQuery(*) the query to execute.\nValues(OPTIONAL) the values that will be replaced in the query, these are ?, @, :, etc.\nFunction(OPTIONAL) is the function that will be executed when the query is finished.\nCache(OPTIONAL) is to specify if the query want to use the cache system, by default is activated this only may be disabled if there're problems with the cache system.","return#Return":"If you've specified a function it will return the result of the query in the function, if not it will return the result of the query.\r\nIn this case it will return the number of affected rows.","functions#Functions":"exports[\"ice_mysql\"]:Update(database, query, values, function, cache)\nexports[\"ice_mysql\"]:AwaitUpdate(database, query, values, function, cache)\nMySQL.Update(database, query, values, function, cache)\nMySQL.AwaitUpdate(database, query, values, function, cache)","use#Use":"","awaitable#Awaitable":"local result = MySQL.AwaitUpdate(1, \"UPDATE players SET name=@name WHERE id=@id\", {\r\n    [\"@name\"] = \"Daniel\",\r\n    [\"@id\"] = 3\r\n})\nconst result = await MySQL.AwaitUpdate(1, \"UPDATE players SET name=@name WHERE id=@id\", [\r\n    [\"@name\"] = \"Daniel\",\r\n    [\"@id\"] = 3\r\n])\nvar result = await MySQL.AwaitUpdate(1, \"UPDATE players SET name=@name WHERE id=@id\", new Dictionary<string, object>() {\r\n    [\"@name\"] = \"Daniel\",\r\n    [\"@id\"] = 3\r\n})","callback#Callback":"Callback will return the same as the awaitable function but in the callback function.\nIf the callback is not provided it will return the same as the awaitable function.\nIf you want to make the query to execute in the main thread you have to specify a simple function like this: () => {} to do anything depending on the language.\nMySQL.Update(1, \"UPDATE players SET name=@name WHERE id=@id\", {\r\n    [\"@name\"] = \"Daniel\",\r\n    [\"@id\"] = 3\r\n}, function(result)\r\n    print(result)\r\nend)\nawait MySQL.Update(1, \"UPDATE players SET name=@name WHERE id=@id\", [\r\n    [\"@name\"] = \"Daniel\",\r\n    [\"@id\"] = 3\r\n], (result) => {\r\n    console.log(result)\r\n})\nMySQL.Update(1, \"UPDATE players SET name=@name WHERE id=@id\", new Dictionary<string, object>() {\r\n    [\"@name\"] = \"Daniel\",\r\n    [\"@id\"] = 3\r\n}, (result) => {\r\n    Console.WriteLine(result)\r\n})"}},"/icMySQL/Functions/MySQL/Unique":{"title":"Update","data":{"":"The insert function is to insert data in the specified table of the database.","params#Params":"Database ID (OPTIONAL) is to specify for what database is the query to. By default it take DB#1 you can change the default DB in the config.js.\nQuery(*) the query to execute.\nValues(OPTIONAL) the values that will be replaced in the query, these are ?, @, :, etc.\nFunction(OPTIONAL) is the function that will be executed when the query is finished.\nCache(OPTIONAL) is to specify if the query want to use the cache system, by default is activated this only may be disabled if there're problems with the cache system.","return#Return":"If you've specified a function it will return the result of the query in the function, if not it will return the result of the query.\r\nIn this case it will return the number of affected rows.","functions#Functions":"exports[\"ice_mysql\"]:Update(database, query, values, function, cache)\nexports[\"ice_mysql\"]:AwaitUpdate(database, query, values, function, cache)\nMySQL.Update(database, query, values, function, cache)\nMySQL.AwaitUpdate(database, query, values, function, cache)","use#Use":"","awaitable#Awaitable":"local result = MySQL.AwaitUpdate(1, \"UPDATE players SET name=@name WHERE id=@id\", {\r\n    [\"@name\"] = \"Daniel\",\r\n    [\"@id\"] = 3\r\n})\nconst result = await MySQL.AwaitUpdate(1, \"UPDATE players SET name=@name WHERE id=@id\", {\r\n    \"@name\": \"Daniel\",\r\n    \"@id\": 3\r\n})\nvar result = await MySQL.AwaitUpdate(1, \"UPDATE players SET name=@name WHERE id=@id\", new Dictionary<string, object>() {\r\n    [\"@name\"] = \"Daniel\",\r\n    [\"@id\"] = 3\r\n})","callback#Callback":"Callback will return the same as the awaitable function but in the callback function.\nIf the callback is not provided it will return the same as the awaitable function.\nIf you want to make the query to execute in the main thread you have to specify a simple function like this: () => {} to do anything depending on the language.\nMySQL.Update(1, \"UPDATE players SET name=@name WHERE id=@id\", {\r\n    [\"@name\"] = \"Daniel\",\r\n    [\"@id\"] = 3\r\n}, function(result)\r\n    print(result)\r\nend)\nawait MySQL.Update(1, \"UPDATE players SET name=@name WHERE id=@id\", {\r\n    \"@name\": \"Daniel\",\r\n    \"@id\": 3\r\n}, (result) => {\r\n    console.log(result)\r\n})\nMySQL.Update(1, \"UPDATE players SET name=@name WHERE id=@id\", new Dictionary<string, object>() {\r\n    [\"@name\"] = \"Daniel\",\r\n    [\"@id\"] = 3\r\n}, (result) => {\r\n    Console.WriteLine(result)\r\n})"}},"/icMySQL/Functions/ORM/Basics":{"title":"Basics","data":{"":"All these documentation has been taken from Sequelize and modified to fit the project.\r\nSequelize provides various methods to assist querying your database for data.Important notice: to perform production-ready queries with Sequelize, make sure you have read the Transactions guide as well. Transactions are important to ensure data integrity and to provide other benefits.This guide will show how to make the standard CRUD queries.","simple-insert-queries#Simple INSERT queries":"First, a simple example:\n// Create a new user\r\nconst jane = await MySQL.ORM.Create(\"players\", { firstName: \"Jane\", lastName: \"Doe\" });\r\nconsole.log(\"Jane's auto-generated ID:\", jane.id);\nThe Model.create() method is a shorthand for building an unsaved instance with Model.build() and saving the instance with instance.save().It is also possible to define which attributes can be set in the create method. This can be especially useful if you create database entries based on a form which can be filled by a user. Using that would, for example, allow you to restrict the User model to set only an username but not an admin flag (i.e., isAdmin):\nconst user = await MySQL.ORM.Create({\r\n  username: 'alice123',\r\n  isAdmin: true\r\n}, { fields: ['username'] });\r\n// let's assume the default of isAdmin is false\r\nconsole.log(user.username); // 'alice123'\r\nconsole.log(user.isAdmin); // false","simple-select-queries#Simple SELECT queries":"You can read the whole table from the database with the findAll method:\n// Find all users\r\nconst users = await MySQL.ORM.FindAll();\r\nconsole.log(users.every(user => user instanceof User)); // true\r\nconsole.log(\"All users:\", JSON.stringify(users, null, 2));\nSELECT * FROM ...","specifying-attributes-for-select-queries#Specifying attributes for SELECT queries":"To select only some attributes, you can use the attributes option:\nMySQL.ORM.FindAll({\r\n  attributes: ['foo', 'bar']\r\n});\nSELECT foo, bar FROM ...\nAttributes can be renamed using a nested array:\nMySQL.ORM.FindAll({\r\n  attributes: ['foo', ['bar', 'baz'], 'qux']\r\n});\nSELECT foo, bar AS baz, qux FROM ...\nWhen using aggregation function, you must give it an alias to be able to access it from the model. In the example above you can get the number of hats with instance.n_hats.Sometimes it may be tiresome to list all the attributes of the model if you only want to add an aggregation:Similarly, it's also possible to remove a selected few attributes:\nMySQL.ORM.FindAll({\r\n  attributes: { exclude: ['baz'] }\r\n});\n-- Assuming all columns are 'id', 'foo', 'bar', 'baz' and 'qux'\r\nSELECT id, foo, bar, qux FROM ...","applying-where-clauses#Applying WHERE clauses":"The where option is used to filter the query. There are lots of operators to use for the where clause, available as Symbols from Op.","the-basics#The basics":"MySQL.ORM.FindAll({\r\n  where: {\r\n    authorId: 2\r\n  }\r\n});\r\n// SELECT * FROM post WHERE authorId = 2;\nObserve that no operator (from Op) was explicitly passed, so Sequelize assumed an equality comparison by default. The above code is equivalent to:\nMySQL.ORM.FindAll({\r\n  where: {\r\n    authorId: {\r\n      [\"=\"]: 2\r\n    }\r\n  }\r\n});\r\n// SELECT * FROM post WHERE authorId = 2;\nMultiple checks can be passed:\nMySQL.ORM.FindAll({\r\n  where: {\r\n    authorId: 12,\r\n    status: 'active'\r\n  }\r\n});\r\n// SELECT * FROM post WHERE authorId = 12 AND status = 'active';\nJust like Sequelize inferred the Op.eq operator in the first example, here Sequelize inferred that the caller wanted an AND for the two checks. The code above is equivalent to:\nMySQL.ORM.FindAll({\r\n  where: {\r\n    [\"and\"]: [\r\n      { authorId: 12 },\r\n      { status: 'active' }\r\n    ]\r\n  }\r\n});\r\n// SELECT * FROM post WHERE authorId = 12 AND status = 'active';\nAn OR can be easily performed in a similar way:\nMySQL.ORM.FindAll({\r\n  where: {\r\n    [\"or\"]: [\r\n      { authorId: 12 },\r\n      { authorId: 13 }\r\n    ]\r\n  }\r\n});\r\n// SELECT * FROM post WHERE authorId = 12 OR authorId = 13;\nSince the above was an OR involving the same field, Sequelize allows you to use a slightly different structure which is more readable and generates the same behavior:\nMySQL.ORM.Destroy({\r\n  where: {\r\n    authorId: {\r\n      [\"or\"]: [12, 13]\r\n    }\r\n  }\r\n});\r\n// DELETE FROM post WHERE authorId = 12 OR authorId = 13;","operators#Operators":"Sequelize provides several operators.\nMySQL.ORM.FindAll({\r\n  where: {\r\n    [\"and\"]: [{ a: 5 }, { b: 6 }],            // (a = 5) AND (b = 6)\r\n    [\"or\"]: [{ a: 5 }, { b: 6 }],             // (a = 5) OR (b = 6)\r\n    someAttribute: {\r\n      // Basics\r\n      [\"=\"]: 3,                              // = 3\r\n      [\"!=\"]: 20,                             // != 20\r\n      [\"===\"]: null,                           // IS NULL\r\n      [\"!\"]: true,                          // IS NOT TRUE\r\n      [\"or\"]: [5, 6],                         // (someAttribute = 5) OR (someAttribute = 6)\r\n\r\n      // Using dialect specific column identifiers (PG in the following example):\r\n      [\"col\"]: 'user.organization_id',        // = \"user\".\"organization_id\"\r\n\r\n      // Number comparisons\r\n      [\">\"]: 6,                              // > 6\r\n      [\">=\"]: 6,                             // >= 6\r\n      [\"<\"]: 10,                             // < 10\r\n      [\"<=\"]: 10,                            // <= 10\r\n      [\"between\"]: [6, 10],                   // BETWEEN 6 AND 10\r\n      [\"notBetween\"]: [11, 15],               // NOT BETWEEN 11 AND 15\r\n\r\n      // Other operators\r\n\r\n      [\"in\"]: [1, 2],                         // IN [1, 2]\r\n      [\"notIn\"]: [1, 2],                      // NOT IN [1, 2]\r\n\r\n      [\"like\"]: '%hat',                       // LIKE '%hat'\r\n      [\"notLike\"]: '%hat',                    // NOT LIKE '%hat'\r\n      [\"startsWith\"]: 'hat',                  // LIKE 'hat%'\r\n      [\"endsWith\"]: 'hat',                    // LIKE '%hat'\r\n      [\"substring\"]: 'hat',                   // LIKE '%hat%'\r\n      [\"iLike\"]: '%hat',                      // ILIKE '%hat' (case insensitive) (PG only)\r\n      [\"notILike\"]: '%hat',                   // NOT ILIKE '%hat'  (PG only)\r\n      [\"regexp\"]: '^[h|a|t]',                 // REGEXP/~ '^[h|a|t]' (MySQL/PG only)\r\n      [\"notRegexp\"]: '^[h|a|t]',              // NOT REGEXP/!~ '^[h|a|t]' (MySQL/PG only)\r\n      [\"iRegexp\"]: '^[h|a|t]',                // ~* '^[h|a|t]' (PG only)\r\n      [\"notIRegexp\"]: '^[h|a|t]',             // !~* '^[h|a|t]' (PG only)\r\n\r\n      [\"any\"]: [2, 3],                        // ANY (ARRAY[2, 3]::INTEGER[]) (PG only)\r\n\r\n      // In Postgres, Op.like/Op.iLike/Op.notLike can be combined to Op.any:\r\n      [\"like\"]: { [\"any\"]: ['cat', 'hat'] }  // LIKE ANY (ARRAY['cat', 'hat'])\r\n\r\n      // There are more postgres-only range operators, see below\r\n    }\r\n  }\r\n});","shorthand-syntax-for-in#Shorthand syntax for in":"Passing an array directly to the where option will implicitly use the IN operator:\nMySQL.ORM.FindAll({\r\n  where: {\r\n    id: [1,2,3] // Same as using `id: { [\"in\"]: [1,2,3] }`\r\n  }\r\n});\r\n// SELECT ... FROM \"posts\" AS \"post\" WHERE \"post\".\"id\" IN (1, 2, 3);","logical-combinations-with-operators#Logical combinations with operators":"The operators and, or and not can be used to create arbitrarily complex nested logical comparisons.","examples-with-and-and-or#Examples with and and or":"MySQL.ORM.FindAll({\r\n  where: {\r\n    rank: {\r\n      [\"or\"]: {\r\n        [\"<\"]: 1000,\r\n        [\"=\"]: null\r\n      }\r\n    },\r\n    // rank < 1000 OR rank IS NULL\r\n\r\n    {\r\n      createdAt: {\r\n        [\"<\"]: new Date(),\r\n        [\">]: new Date(new Date() - 24 * 60 * 60 * 1000)\r\n      }\r\n    },\r\n    // createdAt < [timestamp] AND createdAt > [timestamp]\r\n\r\n    {\r\n      [\"or\"]: [\r\n        {\r\n          title: {\r\n            [\"like\"]: 'Boat%'\r\n          }\r\n        },\r\n        {\r\n          description: {\r\n            [\"like\"]: '%boat%'\r\n          }\r\n        }\r\n      ]\r\n    }\r\n    // title LIKE 'Boat%' OR description LIKE '%boat%'\r\n  }\r\n});","examples-with-not#Examples with not":"MySQL.ORM.FindAll({\r\n  where: {\r\n    name: 'Some Project',\r\n    [\"!\"]: [\r\n      { id: [1,2,3] },\r\n      {\r\n        description: {\r\n          [\"like\"]: 'Hello%'\r\n        }\r\n      }\r\n    ]\r\n  }\r\n});\nThe above will generate:\nSELECT *\r\nFROM `Projects`\r\nWHERE (\r\n  `Projects`.`name` = 'Some Project'\r\n  AND NOT (\r\n    `Projects`.`id` IN (1,2,3)\r\n    AND\r\n    `Projects`.`description` LIKE 'Hello%'\r\n  )\r\n)","postgres-only-range-operators#Postgres-only Range Operators":"Range types can be queried with all supported operators.Keep in mind, the provided range value can define the bound inclusion/exclusion as well.\n[\"contains\"]: 2,            // @> '2'::integer  (PG range contains element operator)\r\n[\"contains\"]: [1, 2],       // @> [1, 2)        (PG range contains range operator)\r\n[\"contained\"]: [1, 2],      // <@ [1, 2)        (PG range is contained by operator)\r\n[\"overlap\"]: [1, 2],        // && [1, 2)        (PG range overlap (have points in common) operator)\r\n[\"adjacent\"]: [1, 2],       // -|- [1, 2)       (PG range is adjacent to operator)\r\n[\"strictLeft\"]: [1, 2],     // << [1, 2)        (PG range strictly left of operator)\r\n[\"strictRight\"]: [1, 2],    // >> [1, 2)        (PG range strictly right of operator)\r\n[\"noExtendRight\"]: [1, 2],  // &< [1, 2)        (PG range does not extend to the right of operator)\r\n[\"noExtendLeft\"]: [1, 2],   // &> [1, 2)        (PG range does not extend to the left of operator)","simple-update-queries#Simple UPDATE queries":"Update queries also accept the where option, just like the read queries shown above.\n// Change everyone without a last name to \"Doe\"\r\nawait MySQL.ORM.Modify({ lastName: \"Doe\" }, {\r\n  where: {\r\n    lastName: null\r\n  }\r\n});","simple-delete-queries#Simple DELETE queries":"Delete queries also accept the where option, just like the read queries shown above.\n// Delete everyone named \"Jane\"\r\nawait MySQL.ORM.Destroy({\r\n  where: {\r\n    firstName: \"Jane\"\r\n  }\r\n});\nTo destroy everything the TRUNCATE SQL can be used:\n// Truncate the table\r\nawait MySQL.ORM.Destroy({\r\n  truncate: true\r\n});","creating-in-bulk#Creating in bulk":"Sequelize provides the Model.bulkCreate method to allow creating multiple records at once, with only one query.The usage of Model.bulkCreate is very similar to Model.create, by receiving an array of objects instead of a single object.\nconst captains = await MySQL.ORM.BulkCreate([\r\n  { name: 'Jack Sparrow' },\r\n  { name: 'Davy Jones' }\r\n]);\r\nconsole.log(captains.length); // 2\r\nconsole.log(captains[0] instanceof Captain); // true\r\nconsole.log(captains[0].name); // 'Jack Sparrow'\r\nconsole.log(captains[0].id); // 1 // (or another auto-generated value)\nHowever, by default, bulkCreate does not run validations on each object that is going to be created (which create does). To make bulkCreate run these validations as well, you must pass the validate: true option. This will decrease performance. Usage example:\n// This will not throw an error, both instances will be created\r\nawait MySQL.ORM.BulkCreate([\r\n  { name: 'abc123' },\r\n  { name: 'name too long' }\r\n]);\r\n\r\n// This will throw an error, nothing will be created\r\nawait MySQL.ORM.BulkCreate([\r\n  { name: 'abc123' },\r\n  { name: 'name too long' }\r\n], { validate: true });\nIf you are accepting values directly from the user, it might be beneficial to limit the columns that you want to actually insert. To support this, bulkCreate() accepts a fields option, an array defining which fields must be considered (the rest will be ignored).\nawait MySQL.ORM.BulkCreate([\r\n  { username: 'foo' },\r\n  { username: 'bar', admin: true }\r\n], { fields: ['username'] });\r\n// Neither foo nor bar are admins.","ordering-and-grouping#Ordering and Grouping":"Sequelize provides the order and group options to work with ORDER BY and GROUP BY.","ordering#Ordering":"The order option takes an array of items to order the query by or a sequelize method. These items are themselves arrays in the form [column, direction]. The column will be escaped correctly and the direction will be checked in a whitelist of valid directions (such as ASC, DESC, NULLS FIRST, etc).\nMySQL.ORM.FindAll({\r\n  order: [\r\n    // Will escape title and validate DESC against a list of valid direction parameters\r\n    ['title', 'DESC'],\r\n\r\n    // Will order an associated model's createdAt using the model name as the association's name.\r\n    [Task, 'createdAt', 'DESC'],\r\n\r\n    // Will order through an associated model's createdAt using the model names as the associations' names.\r\n    [Task, Project, 'createdAt', 'DESC'],\r\n\r\n    // Will order by an associated model's createdAt using the name of the association.\r\n    ['Task', 'createdAt', 'DESC'],\r\n\r\n    // Will order by a nested associated model's createdAt using the names of the associations.\r\n    ['Task', 'Project', 'createdAt', 'DESC'],\r\n\r\n    // Will order by an associated model's createdAt using an association object. (preferred method)\r\n    [Subtask.associations.Task, 'createdAt', 'DESC'],\r\n\r\n    // Will order by a nested associated model's createdAt using association objects. (preferred method)\r\n    [Subtask.associations.Task, Task.associations.Project, 'createdAt', 'DESC'],\r\n\r\n    // Will order by an associated model's createdAt using a simple association object.\r\n    [{model: Task, as: 'Task'}, 'createdAt', 'DESC'],\r\n\r\n    // Will order by a nested associated model's createdAt simple association objects.\r\n    [{model: Task, as: 'Task'}, {model: Project, as: 'Project'}, 'createdAt', 'DESC']\r\n  ],\r\n});\r\n\r\nMySQL.ORM.FindOne({\r\n  order: [\r\n    // will return `name`\r\n    ['name'],\r\n    // will return `username` DESC\r\n    ['username', 'DESC'],\r\n  ]\r\n});\nTo recap, the elements of the order array can be the following:\nA string (which will be automatically quoted)\nAn array, whose first element will be quoted, second will be appended verbatim\nAn object with a raw field:\nThe content of raw will be added verbatim without quoting\nEverything else is ignored, and if raw is not set, the query will fail","grouping#Grouping":"The syntax for grouping and ordering are equal, except that grouping does not accept a direction as last argument of the array (there is no ASC, DESC, NULLS FIRST, etc).You can also pass a string directly to group, which will be included directly (verbatim) into the generated SQL. Use with caution and don't use with user generated content.\nMySQL.ORM.FindAll({ group: 'name' });\r\n// yields 'GROUP BY name'","limits-and-pagination#Limits and Pagination":"The limit and offset options allow you to work with limiting / pagination:\n// Fetch 10 instances/rows\r\nMySQL.ORM.FindAll({ limit: 10 });\r\n\r\n// Skip 8 instances/rows\r\nMySQL.ORM.FindAll({ offset: 8 });\r\n\r\n// Skip 5 instances and fetch the 5 after that\r\nMySQL.ORM.FindAll({ offset: 5, limit: 5 });\nUsually these are used alongside the order option.","utility-methods#Utility methods":"Sequelize also provides a few utility methods.","count#count":"The count method simply counts the occurrences of elements in the database.\nconsole.log(`There are ${await MySQL.ORM.Count()} projects`);\r\n\r\nconst amount = await MySQL.ORM.Count({\r\n  where: {\r\n    id: {\r\n      [\">\"]: 25\r\n    }\r\n  }\r\n});\r\nconsole.log(`There are ${amount} projects with an id greater than 25`);","max-min-and-sum#max, min and sum":"Sequelize also provides the max, min and sum convenience methods.Let's assume we have three users, whose ages are 10, 5, and 40.\nawait MySQL.ORM.Max('age'); // 40\r\nawait MySQL.ORM.Max('age', { where: { age: { [\"<\"]: 20 } } }); // 10\r\nawait MySQL.ORM.Min('age'); // 5\r\nawait MySQL.ORM.Min('age', { where: { age: { [\">\"]: 5 } } }); // 10\r\nawait MySQL.ORM.Sum('age'); // 55\r\nawait MySQL.ORM.Sum('age', { where: { age: { [\">\"]: 5 } } }); // 50","increment-decrement#increment, decrement":"Sequelize also provides the increment convenience method.Let's assume we have a user, whose age is 10.\nawait MySQL.ORM.Increment({age: 5}, { where: { id: 1 } }) // Will increase age to 15\r\nawait MySQL.ORM.Increment({age: -5}, { where: { id: 1 } }) // Will decrease age to 5"}},"/icMySQL/Functions/ORM/Finders":{"title":"Finders","data":{"":"Finder methods are the ones that generate SELECT queries.By default, the results of all finder methods are instances of the model class (as opposed to being just plain JavaScript objects). This means that after the database returns the results, Sequelize automatically wraps everything in proper instance objects. In a few cases, when there are too many results, this wrapping can be inefficient. To disable this wrapping and receive a plain response instead, pass { raw: true } as an option to the finder method.","findall#FindAll":"The FindAll method is already known from the previous tutorial. It generates a standard SELECT query which will retrieve all entries from the table (unless restricted by something like a where clause, for example).","findbyid#FindById":"The FindById method obtains only a single entry from the table, using the provided primary key.\nconst project = await MySQL.ORM.FindById(123);\r\nif (project === null) {\r\n  console.log('Not found!');\r\n} else {\r\n  console.log(project instanceof Project); // true\r\n  // Its primary key is 123\r\n}","findone#FindOne":"The FindOne method obtains the first entry it finds (that fulfills the optional query options, if provided).\nconst project = await MySQL.ORM.FindOne({ where: { title: 'My Title' } });\r\nif (project === null) {\r\n  console.log('Not found!');\r\n} else {\r\n  console.log(project instanceof Project); // true\r\n  console.log(project.title); // 'My Title'\r\n}","findorcreate#FindOrCreate":"The method FindOrCreate will create an entry in the table unless it can find one fulfilling the query options. In both cases, it will return an instance (either the found instance or the created instance) and a boolean indicating whether that instance was created or already existed.The where option is considered for finding the entry, and the defaults option is used to define what must be created in case nothing was found. If the defaults do not contain values for every column, Sequelize will take the values given to where (if present).Let's assume we have an empty database with a User model which has a username and a job.\nconst [user, created] = await MySQL.ORM.FindOrCreate({\r\n  where: { username: 'sdepold' },\r\n  defaults: {\r\n    job: 'Technical Lead JavaScript'\r\n  }\r\n});\r\nconsole.log(user.username); // 'sdepold'\r\nconsole.log(user.job); // This may or may not be 'Technical Lead JavaScript'\r\nconsole.log(created); // The boolean indicating whether this instance was just created\r\nif (created) {\r\n  console.log(user.job); // This will certainly be 'Technical Lead JavaScript'\r\n}","findandcountall#FindAndCountAll":"The FindAndCountAll method is a convenience method that combines FindAll and count. This is useful when dealing with queries related to pagination where you want to retrieve data with a limit and offset but also need to know the total number of records that match the query.When group is not provided, the FindAndCountAll method returns an object with two properties:\ncount - an integer - the total number records matching the query\nrows - an array of objects - the obtained records\nWhen group is provided, the FindAndCountAll method returns an object with two properties:\ncount - an array of objects - contains the count in each group and the projected attributes\nrows - an array of objects - the obtained records\nconst { count, rows } = await MySQL.ORM.FindAndCountAll({\r\n  where: {\r\n    title: {\r\n      [\"like\"]: 'foo%'\r\n    }\r\n  },\r\n  offset: 10,\r\n  limit: 2\r\n});\r\nconsole.log(count);\r\nconsole.log(rows);"}},"/icMySQL/Functions/Redis/Delete":{"title":"Delete","data":{"":"The delete function is to remove data from the memory.","params#Params":"Key(*) the name of the key.\nFunction(OPTIONAL) is the function that will be executed when the query is finished.","return#Return":"If you've specified a function it will return the result of the query in the function, if not it will return the result of the query.","functions#Functions":"exports[\"ice_mysql\"]:RedisDel(key, function)\nMySQL.Redis.RedisDel(key, function)","use#Use":"","awaitable#Awaitable":"local result = MySQL.Redis.RedisDel(\"name\")\nconst result = await MySQL.Redis.RedisDel(\"name\")\nvar result = await MySQL.Redis.RedisDel(\"name\")","callback#Callback":"Callback will return the same as the awaitable function but in the callback function.\nIf the callback is not provided it will return the same as the awaitable function.\nIf you want to make the query to execute in the main thread you have to specify a simple function like this: () => {} to do anything depending on the language.\nMySQL.Redis.RedisDel(\"name\", function(result)\r\n    print(result)\r\nend)\nMySQL.Redis.RedisDel(\"name\", (result) => {\r\n    console.log(result)\r\n})\nMySQL.Redis.RedisDel(\"name\", (result) => {\r\n    Console.WriteLine(result)\r\n})"}},"/icMySQL/Functions/Redis/Exist":{"title":"Delete","data":{"":"The exist function is to get if a data exist in the memory.","params#Params":"Key(*) the name of the key.\nFunction(OPTIONAL) is the function that will be executed when the query is finished.","return#Return":"If you've specified a function it will return the result of the query in the function, if not it will return the result of the query.","functions#Functions":"exports[\"ice_mysql\"]:RedisExists(key, function)\nMySQL.Redis.RedisExists(key, function)","use#Use":"","awaitable#Awaitable":"local result = MySQL.Redis.RedisExists(\"name\")\nconst result = await MySQL.Redis.RedisExists(\"name\")\nvar result = await MySQL.Redis.RedisExists(\"name\")","callback#Callback":"Callback will return the same as the awaitable function but in the callback function.\nIf the callback is not provided it will return the same as the awaitable function.\nIf you want to make the query to execute in the main thread you have to specify a simple function like this: () => {} to do anything depending on the language.\nMySQL.Redis.RedisExists(\"name\", function(result)\r\n    print(result)\r\nend)\nMySQL.Redis.RedisExists(\"name\", (result) => {\r\n    console.log(result)\r\n})\nMySQL.Redis.RedisExists(\"name\", (result) => {\r\n    Console.WriteLine(result)\r\n})"}},"/icMySQL/Functions/MySQL/Transaction":{"title":"Transaction","data":{"":"The insert function is to insert data in the specified table of the database.","params#Params":"Database ID (OPTIONAL) is to specify for what database is the query to. By default it take DB#1 you can change the default DB in the config.js.\nQuery(*) the query to execute.\nValues(OPTIONAL) the values that will be replaced in the query, these are ?, @, :, etc.\nFunction(OPTIONAL) is the function that will be executed when the query is finished.\nCache(OPTIONAL) is to specify if the query want to use the cache system, by default is activated this only may be disabled if there're problems with the cache system.","return#Return":"If you've specified a function it will return the result of the query in the function, if not it will return the result of the query.\r\nIn this case it will return the match data.","functions#Functions":"exports[\"ice_mysql\"]:Transaction(database, query, function)\nexports[\"ice_mysql\"]:AwaitTransaction(database, query)\nMySQL.Transaction(database, query, function)\nMySQL.AwaitTransaction(database, query)","use#Use":"","awaitable#Awaitable":"local queries = {\r\n    {\r\n        'INSERT INTO `trunkitems` (id, plate, items) VALUES (?, ?, ?)',\r\n        {\r\n            6, \"test\", {}\r\n        }\r\n    },\r\n    {\r\n        'INSERT INTO `trunkitems` (id, plate, items) VALUES (?, ?, ?)',\r\n        {\r\n            7, \"test2\", {}\r\n        }\r\n    },\r\n}\r\nlocal success = exports[\"ice_mysql\"]:AwaitTransaction(1, queries)\r\nprint(success)\nconst queries = [\r\n    [\r\n        'INSERT INTO `trunkitems` (id, plate, items) VALUES (?, ?, ?)',\r\n        [\r\n            6, \"test\", {}\r\n        ]\r\n    ],\r\n    [\r\n        'INSERT INTO `trunkitems` (id, plate, items) VALUES (?, ?, ?)',\r\n        [\r\n            7, \"test2\", {}\r\n        ]\r\n    ],\r\n]\r\nconst success = await MySQL.AwaitTransaction(1, queries)\r\nconsole.log(success)\nvar queries = new List<List<object>>() {\r\n    new List<object>() {\r\n        \"INSERT INTO `trunkitems` (id, plate, items) VALUES (?, ?, ?)\",\r\n        new List<object>() {\r\n            6, \"test\", new List<object>()\r\n        }\r\n    },\r\n    new List<object>() {\r\n        \"INSERT INTO `trunkitems` (id, plate, items) VALUES (?, ?, ?)\",\r\n        new List<object>() {\r\n            7, \"test2\", new List<object>()\r\n        }\r\n    },\r\n}\r\nvar success = await MySQL.AwaitTransaction(1, queries)\r\nConsole.WriteLine(success)","callback#Callback":"Callback will return the same as the awaitable function but in the callback function.\nIf the callback is not provided it will return the same as the awaitable function.\nIf you want to make the query to execute in the main thread you have to specify a simple function like this: () => {} to do anything depending on the language.\nlocal queries = {\r\n    {\r\n        'INSERT INTO `trunkitems` (id, plate, items) VALUES (?, ?, ?)',\r\n        {\r\n            6, \"test\", {}\r\n        }\r\n    },\r\n    {\r\n        'INSERT INTO `trunkitems` (id, plate, items) VALUES (?, ?, ?)',\r\n        {\r\n            7, \"test2\", {}\r\n        }\r\n    },\r\n}\r\nMySQL.Transaction(1, queries, function(success)\r\n    print(success)\r\nend)\nconst queries = [\r\n    [\r\n        'INSERT INTO `trunkitems` (id, plate, items) VALUES (?, ?, ?)',\r\n        [\r\n            6, \"test\", {}\r\n        ]\r\n    ],\r\n    [\r\n        'INSERT INTO `trunkitems` (id, plate, items) VALUES (?, ?, ?)',\r\n        [\r\n            7, \"test2\", {}\r\n        ]\r\n    ],\r\n]\r\nMySQL.Transaction(1, queries, (success) => {\r\n    console.log(success)\r\n})\nvar queries = new List<List<object>>() {\r\n    new List<object>() {\r\n        \"INSERT INTO `trunkitems` (id, plate, items) VALUES (?, ?, ?)\",\r\n        new List<object>() {\r\n            6, \"test\", new List<object>()\r\n        }\r\n    },\r\n    new List<object>() {\r\n        \"INSERT INTO `trunkitems` (id, plate, items) VALUES (?, ?, ?)\",\r\n        new List<object>() {\r\n            7, \"test2\", new List<object>()\r\n        }\r\n    },\r\n}\r\nMySQL.Transaction(1, queries, (success) => {\r\n    Console.WriteLine(success)\r\n})"}},"/icMySQL/Functions/Redis/Expire":{"title":"Expire","data":{"":"The expire function will set a expire time to a key in redis.","params#Params":"Key(*) the name of the key.\nSeconds(*) the seconds that the key will be alive.\nFunction(OPTIONAL) is the function that will be executed when the query is finished.","return#Return":"If you've specified a function it will return the result of the query in the function, if not it will return the result of the query.","functions#Functions":"exports[\"ice_mysql\"]:RedisExpire(key, seconds, function)\nMySQL.Redis.RedisExpire(key, seconds, function)","use#Use":"","awaitable#Awaitable":"local result = MySQL.Redis.RedisExpire(\"name\", 60)\nconst result = await MySQL.Redis.RedisExpire(\"name\", 60)\nvar result = await MySQL.Redis.RedisExpire(\"name\", 60)","callback#Callback":"Callback will return the same as the awaitable function but in the callback function.\nIf the callback is not provided it will return the same as the awaitable function.\nIf you want to make the query to execute in the main thread you have to specify a simple function like this: () => {} to do anything depending on the language.\nMySQL.Redis.RedisExpire(\"name\", 60, function(result)\r\n    print(result)\r\nend)\nMySQL.Redis.RedisExpire(\"name\", 60, (result) => {\r\n    console.log(result)\r\n})\nMySQL.Redis.RedisExpire(\"name\", 60, (result) => {\r\n    Console.WriteLine(result)\r\n})"}},"/icMySQL/Functions/Redis/Flush":{"title":"Flush","data":{"":"The flush function will delete all the keys in the database.","params#Params":"Function(OPTIONAL) is the function that will be executed when the query is finished.","return#Return":"If you've specified a function it will return the result of the query in the function, if not it will return the result of the query.","functions#Functions":"exports[\"ice_mysql\"]:RedisFlush(function)\nMySQL.Redis.RedisFlush(function)","use#Use":"","awaitable#Awaitable":"local result = MySQL.Redis.RedisFlush()\nconst result = await MySQL.Redis.RedisFlush()\nvar result = await MySQL.Redis.RedisFlush()","callback#Callback":"Callback will return the same as the awaitable function but in the callback function.\nIf the callback is not provided it will return the same as the awaitable function.\nIf you want to make the query to execute in the main thread you have to specify a simple function like this: () => {} to do anything depending on the language.\nMySQL.Redis.RedisFlush(function(result)\r\n    print(result)\r\nend)\nMySQL.Redis.RedisFlush((result) => {\r\n    console.log(result)\r\n})\nMySQL.Redis.RedisFlush((result) => {\r\n    Console.WriteLine(result)\r\n})"}},"/icMySQL/Functions/Redis/Get":{"title":"Get","data":{"":"The get function is to get data from the memory.","params#Params":"Key(*) the name of the key.\nFunction(OPTIONAL) is the function that will be executed when the query is finished.","return#Return":"If you've specified a function it will return the result of the query in the function, if not it will return the result of the query.","functions#Functions":"exports[\"ice_mysql\"]:RedisGet(key, function)\nMySQL.Redis.RedisGet(key, function)","use#Use":"","awaitable#Awaitable":"local result = MySQL.Redis.RedisGet(\"name\")\nconst result = await MySQL.Redis.RedisGet(\"name\")\nvar result = await MySQL.Redis.RedisGet(\"name\")","callback#Callback":"Callback will return the same as the awaitable function but in the callback function.\nIf the callback is not provided it will return the same as the awaitable function.\nIf you want to make the query to execute in the main thread you have to specify a simple function like this: () => {} to do anything depending on the language.\nMySQL.Redis.RedisGet(\"name\", function(result)\r\n    print(result)\r\nend)\nMySQL.Redis.RedisGet(\"name\", (result) => {\r\n    console.log(result)\r\n})\nMySQL.Redis.RedisGet(\"name\", (result) => {\r\n    Console.WriteLine(result)\r\n})"}},"/icMySQL/Functions/Redis/Keys":{"title":"Keys","data":{"":"The keys functions are used to manage the keys in the redis database.","params#Params":"Pattern(*) is the pattern that will be used to find the keys.\nFunction(OPTIONAL) is the function that will be executed when the query is finished.","return#Return":"If you've specified a function it will return the result of the query in the function, if not it will return the result of the query.","functions#Functions":"exports[\"ice_mysql\"]:RedisKeys(pattern, function)\nMySQL.Redis.RedisKeys(pattern, function)","use#Use":"","awaitable#Awaitable":"local result = MySQL.Redis.RedisKeys(\"*name*\")\nconst result = await MySQL.Redis.RedisKeys(\"*name*\")\nvar result = await MySQL.Redis.RedisKeys(\"*name*\")","callback#Callback":"Callback will return the same as the awaitable function but in the callback function.\nIf the callback is not provided it will return the same as the awaitable function.\nIf you want to make the query to execute in the main thread you have to specify a simple function like this: () => {} to do anything depending on the language.\nMySQL.Redis.RedisKeys(\"*name*\", function(result)\r\n    print(result)\r\nend)\nMySQL.Redis.RedisKeys(\"*name*\", (result) => {\r\n    console.log(result)\r\n})\nMySQL.Redis.RedisKeys(\"*name*\", (result) => {\r\n    Console.WriteLine(result)\r\n})"}},"/icMySQL/Functions/Redis/MGet":{"title":"MGet","data":{"":"The mget function returns the values of all specified keys. For every key that does not hold a string value or does not exist, the special value nil is returned. Because of this, the operation never fails.","params#Params":"Keys(*) is the array of keys that you want to get the values.\nFunction(OPTIONAL) is the function that will be executed when the query is finished.","return#Return":"If you've specified a function it will return the result of the query in the function, if not it will return the result of the query.","functions#Functions":"exports[\"ice_mysql\"]:RedisMGet(keys, function)\nMySQL.Redis.RedisMGet(keys, function)","use#Use":"","awaitable#Awaitable":"local result = MySQL.Redis.RedisMGet({\"key1\", \"key2\", \"key3})\nconst result = await MySQL.Redis.RedisMGet([\"key1\", \"key2\", \"key3\"])\nvar result = await MySQL.Redis.RedisMGet(new string[] {\"key1\", \"key2\", \"key3\"})","callback#Callback":"Callback will return the same as the awaitable function but in the callback function.\nIf the callback is not provided it will return the same as the awaitable function.\nIf you want to make the query to execute in the main thread you have to specify a simple function like this: () => {} to do anything depending on the language.\nMySQL.Redis.RedisMGet({\"key1\", \"key2\", \"key3}, function(result)\r\n    print(result)\r\nend)\nMySQL.Redis.RedisMGet([\"key1\", \"key2\", \"key3\"], (result) => {\r\n    console.log(result)\r\n})\nMySQL.Redis.RedisMGet(new string[] {\"key1\", \"key2\", \"key3\"}, (result) => {\r\n    Console.WriteLine(result)\r\n})"}},"/icMySQL/Functions/Redis/Set":{"title":"Set","data":{"":"The set function is to set data to the memory.","params#Params":"Key(*) the name of the key.\nValue(*) the value to set to the key.\nFunction(OPTIONAL) is the function that will be executed when the query is finished.","return#Return":"If you've specified a function it will return the result of the query in the function, if not it will return the result of the query.","functions#Functions":"exports[\"ice_mysql\"]:RedisSet(key, value, function)\nMySQL.Redis.RedisSet(key, value, function)","use#Use":"","awaitable#Awaitable":"local result = MySQL.Redis.RedisSet(\"name\", \"DanielGP\")\nconst result = await MySQL.Redis.RedisSet(\"name\", \"DanielGP\")\nvar result = await MySQL.Redis.RedisSet(\"name\", \"DanielGP\")","callback#Callback":"Callback will return the same as the awaitable function but in the callback function.\nIf the callback is not provided it will return the same as the awaitable function.\nIf you want to make the query to execute in the main thread you have to specify a simple function like this: () => {} to do anything depending on the language.\nMySQL.Redis.RedisSet(\"name\", \"DanielGP\", function(result)\r\n    print(result)\r\nend)\nMySQL.Redis.RedisSet(\"name\", \"DanielGP\", (result) => {\r\n    console.log(result)\r\n})\nMySQL.Redis.RedisSet(\"name\", \"DanielGP\", (result) => {\r\n    Console.WriteLine(result)\r\n})"}},"/icMySQL/Functions/Redis/Update":{"title":"Update","data":{"":"The update function will update the value of a key in the redis database.","params#Params":"Key(*) the name of the key.\nValue(*) the new value of the key.\nFunction(OPTIONAL) is the function that will be executed when the query is finished.","return#Return":"If you've specified a function it will return the result of the query in the function, if not it will return the result of the query.","functions#Functions":"exports[\"ice_mysql\"]:RedisUpdate(key, newValue, function)\nMySQL.Redis.RedisUpdate(key, newValue, function)","use#Use":"","awaitable#Awaitable":"local result = MySQL.Redis.RedisUpdate(\"name\", \"kDex\")\nconst result = await MySQL.Redis.RedisUpdate(\"name\", \"kDex\")\nvar result = await MySQL.Redis.RedisUpdate(\"name\", \"kDex\")","callback#Callback":"Callback will return the same as the awaitable function but in the callback function.\nIf the callback is not provided it will return the same as the awaitable function.\nIf you want to make the query to execute in the main thread you have to specify a simple function like this: () => {} to do anything depending on the language.\nMySQL.Redis.RedisUpdate(\"name\", \"kDex\", function(result)\r\n    print(result)\r\nend)\nMySQL.Redis.RedisUpdate(\"name\", \"kDex\", (result) => {\r\n    console.log(result)\r\n})\nMySQL.Redis.RedisUpdate(\"name\", \"kDex\", (result) => {\r\n    Console.WriteLine(result)\r\n})"}},"/icMySQL/Installation":{"title":"Installation","data":{"installation#Installation":"It is recommended that one follows each step sequentially from the outset to ensure that no installation errors arise.","start-order#Start Order":"In order for the resource to start correctly and not receive any errors, we must start the resources in the following order\nensure icmysql\r\n...\r\nensure core","setup-config#Setup Config":"Config = {};\r\nConfig.Language = \"es\"; // en, es, fr\r\n\r\n// DataMemSave\r\nConfig.SaveDirPath = \"IceMysql/Data/\"; // Path respective to the FXServer.exe file\r\nConfig.SaveInterval = 20000; // The interval in milliseconds that the resource will save the data in the JSON file don't put a value less than 5000\r\n\r\n// Errors\r\nConfig.Debug = true; // Show debug messages in the console\r\nConfig.ShowErrorDescription = true; // Show the error description if is registered in the list\r\nConfig.ShowErrorSolution = true; // Show the error solution if is registered in the list\r\n\r\n// LOGS\r\nConfig.LogFilesPath = \"IceMysql/Logs/IceMysql\"; // Path respective to the FXServer.exe file\r\nConfig.MaxLogFiles = 10; // The count of log files that will be saved, the oldest will be deleted\r\n\r\n// Discord Logs\r\nConfig.DiscordLogs = false; // Enable the discord logs\r\nConfig.DiscordWebhook = \"\" // The discord webhook that will be used to send relevant data, if you don't want to send the error reports change the previous value to false\r\nConfig.SendUnknownErrors = true; // Send the unknown errors to the discord webhook\r\nConfig.SendCommonErrors = true; // Send the common errors to the discord webhook that include a posible solution\r\nConfig.SendSaveData = true; // Send the file name that is being saved\r\nConfig.SendBackupInfo = true; // Send the backup event when a backup is executed\r\nConfig.SendDatabaseMapped = true; // Send the database mapped event when a database is mapped\r\n\r\n// BACKUP\r\nConfig.BackupEnabled = true; // Enable the backup system\r\nConfig.MysqlDumpPath = \"C:/xampp/mysql/bin/mysqldump.exe\"; // The path of the mysqldump.exe file, in this case is the path of the xampp mysql dump \r\n// MOST USED PATHS\r\n// XAMPP: C:/xampp/mysql/bin/mysqldump.exe\r\n// WAMP: C:/wamp/bin/mysql/mysql5.7.26/bin/mysqldump.exe\r\n// MariaDB: C:/Program Files/MariaDB 11.2/bin/mysqldump.exe\r\nConfig.BackupDirPath = \"IceMysql/Backups\"; // Path respective to the FXServer.exe file\r\nConfig.MaxBackups = 4; // The max count of backups that will be saved, the oldest will be deleted\r\nConfig.Days = [5, 14, 23, 29]; // The days that the backup will be executed, if the array is empty the backup will be executed every day\r\nConfig.Hour = \"18:36\" // The hour in 24h format that the backup will be executed, in this example the backup will be executed at 4:30 AM\r\n\r\n// DATABASE\r\nConfig.MaxDB = 10; // The max count of databases that can be readed in the server.cfg file\r\nConfig.MaxConnectionLimit = 15; // The max count of connections that can be created per database(recomend to not alter this value too much)\r\nConfig.QueueLimit = 100; // The max count of queries that can be queued per database(recomend to not alter this value too much)\r\nConfig.DefaultDB = 1; // The default database that will be used if the database is not specified in the query\r\nConfig.SlowQueryWarn = 500; // The time in milliseconds that the query will be considered slow and will be logged in the console\r\nConfig.CacheMaxSize = 50; // The time of the cache in megabytes that will be used to store the queries, if the cache is full the oldest query will be deleted, please don't increase a lot this value because the cache is stored in the RAM\r\n\r\n// MongoDB\r\nConfig.MongoDB = false; // Enable the MongoDB support\r\nConfig.DefaultMongoDB = 1;\r\nConfig.ConnectiTimout = 5000; // The time in milliseconds that the MongoDB will wait for a connection to be available in the pool, if the time is exceeded a error will be thrown\r\n\r\n// Debug UI\r\nConfig.Enabled = true; // Enable the debug UI\r\nConfig.DebugLicenses = [\"license:123eb974ddb060eb123e8e4feee66a9efb2eeebe\"] // The licenses of the players that will be able to use the debug UI.\r\n\r\n// ORM\r\nConfig.ORM = true; // Enable the ORM queries\r\nConfig.DefaultORMDB = 1; // The default database that will be used if the database is not specified in the orm query\r\nConfig.RawData = true; // If the ORM will return the raw data or the model instance that contains sequelize data\r\nConfig.ConnectionsORM = [0, 10] // Minimum and maximum count of connections that will be created for the ORM, this is used to create a pool of connections that will be used by the ORM, this is used to avoid the creation of a connection for each query\r\nConfig.ORMConnectionTimout = 15000 // The time in milliseconds that the ORM will wait for a connection to be available in the pool, if the time is exceeded a error will be thrown\r\nConfig.LogORMConnections = false; // Show in the console when a connection is created or released by the ORM\r\n\r\n// Redis\r\nConfig.Redis = false; // Enable the Redis support\r\n\r\n// Update\r\nConfig.CheckForUpdates = true; // Check for updates when the server starts\r\nConfig.AutoUpdate = true; // If there is a new version, the resource will be updated automatically in the next server restart\r\n// After update you need to restart the server to apply the changes","setup-cfg#Setup CFG":"set mysqlCredentials_1 \"host=127.0.0.1;user=root; password=1234; database=fxserver; port=3306\"\r\nset mysqlCredentials_2 \"host=127.0.0.1;user=root; password=1234; database=fxserver2; port=3306\"\r\n..."}},"/icTrophies":{"title":"Ice Cluster","data":{"":"Take your FiveM server to new heights with our feature-packed script! Our script provides an advanced achievement system that will challenge and keep players constantly progressing. Each achievement is an opportunity for players to demonstrate their skill and commitment, while immersing themselves in a competitive and rewarding gaming experience. Real-time notifications ensure that every achievement is celebrated instantly, creating an atmosphere of anticipation and satisfaction.","support#Support":"Right now we only give support in our Discord Server. If you ask in the forum we will try to answer you as soon as possible but to make sure to get an answer join our Discord Server."}},"/icTrophies/Guide":{"title":"Guide","data":{"guide-for-adding-trophies-in-the-lua-file#Guide for Adding Trophies in the LUA File":"This document will guide you step by step on how to add new trophies or achievements to the LUA file.","understand-the-structure#Understand the Structure":"Before adding a new trophy or achievement, it's essential to understand how the file is structured. Each trophy is represented as a table within the Config.Trophies table.","add-a-new-trophy-table#Add a New Trophy Table":"Locate the Config.Trophies section in the LUA file.\nWithin this section, you can see several examples of trophies, such as \"job\", \"house\", \"car\", etc. Each of these is a table representing a trophy.\nTo add a new trophy, simply create a new table following the same format.","example#Example":"If you want to add a trophy for \"First Travel\", follow the format below:\n[\"travel\"] = {\r\n    [\"title\"] = \"First Travel\",\r\n    [\"description\"] = \"Complete your first travel in the server\",\r\n    [\"other\"] = {\r\n        [\"type\"] = 0,       -- Trophy type: 0 = easy, 1 = medium, etc.\r\n        [\"confetti\"] = true, -- If you want confetti when achieved.\r\n        [\"sound\"] = true     -- If you want a notification sound.\r\n    },\r\n},","details-to-consider#Details to Consider":"[\"title\"]: The name of the trophy.\n[\"description\"]: A brief description of how the trophy is obtained.\n[\"other\"][\"type\"]: The trophy type based on difficulty. It can be 0 for easy, 1 for medium, 2 for hard, and 3 for master.\n[\"confetti\"]: If you want confetti when the trophy is achieved, set to true. Otherwise, false.\n[\"sound\"]: If you want a notification sound when the trophy is achieved, set to true. Otherwise, false.","troubleshoot-if-needed#Troubleshoot if Needed":"If the trophy isn't appearing or working correctly, double-check your code for any missing or misplaced brackets, misspelled words, or incorrect data types.","how-to-implement-the-trophy#How to Implement the Trophy":"Once you've set up and added your trophies, you might be wondering how to actually \"award\" them to players when they achieve certain milestones in the game. Here's a step-by-step guide on how to integrate the trophy system into your FiveM  Server:","use-the-function#Use the Function":"exports[\"ic_trophies\"]:NewTrophy(trophyName), is what you'll use to award the trophy. Replace  trophyName with the name of the trophy you want to award.For instance, to award the \"First Travel\" trophy, you'd use:\nexports[\"ic_trophies\"]:NewTrophy(\"travel\")","implement-in-your-script#Implement in Your Script:":"Place the export function at the relevant point in your script. For example, in the provided sample:\nPlay.Shared = function(shared, p)\r\n    -- ... other code ...\r\n\r\n    -- This is where a trophy is awarded for sharing an animation.\r\n    exports[\"ice_trophies\"]:NewTrophy(\"animation\")\r\n    \r\n    -- ... other code ...\r\nend\nRemember, the most crucial part is understanding the structure. Once you grasp that, adding new trophies will become second nature. If you ever find yourself in doubt, refer back to the example provided. Happy coding!"}},"/icTrophies/Installation":{"title":"Intallation","data":{"installation#Installation":"It is recommended that one follows each step sequentially from the outset to ensure that no installation errors arise.","start-order#Start Order":"In order for the resource to start correctly and not receive any errors, we must start the resources in the following order\nensure core\r\n...\r\nensure ic_trophies","setting-up-the-trophies-database#Setting Up the Trophies Database":"To set up the trophies table in your database, execute the provided SQL command.\nCREATE TABLE IF NOT EXISTS `players_trophies` (\r\n  `id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `license` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',\r\n  `trophies` longtext DEFAULT NULL,\r\n  PRIMARY KEY (`id`),\r\n  KEY `license` (`license`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=latin1;","setup-config#Setup Config":"To ensure the correct functioning of the script, it is essential to make some adjustments to the configuration file.\n-- Confetties types: \r\n-- 0 = easy\r\n-- 1 = medium\r\n-- 2 = hard\r\n-- 3 = master\r\n\r\nConfig = {}\r\nConfig.Mysql = \"icmysql\" -- oxmysql, icmysql\r\nConfig.OpenMenu = \"l\" -- Key to open menu\r\nConfig.AchivementVolume = 0.4 -- Volume of notification sound (0.1 - 1.0)\r\nConfig.Trophies = {\r\n    [\"job\"] = {\r\n        [\"title\"] = \"First Job\",\r\n        [\"description\"] = \"Get your first job in the server \",\r\n        [\"other\"] = {\r\n            [\"type\"] = 0,\r\n            [\"confetti\"] = true,\r\n            [\"sound\"] = true\r\n        },\r\n    },\r\n    [\"house\"] = {\r\n        [\"title\"] = \"First House\",\r\n        [\"description\"] = \"Get your first house in the server\",\r\n        [\"other\"] = {\r\n            [\"type\"] = 1,\r\n            [\"confetti\"] = true,\r\n            [\"sound\"] = true\r\n        },\r\n    },\r\n    [\"car\"] = {\r\n        [\"title\"] = \"First Car\",\r\n        [\"description\"] = \"Get your first car in the server\",\r\n        [\"other\"] = {\r\n            [\"type\"] = 2,\r\n            [\"confetti\"] = true,\r\n            [\"sound\"] = true\r\n        },\r\n    },\r\n    [\"animation\"] = {\r\n        [\"title\"] = \"First Shared Animation\",\r\n        [\"description\"] = \"Get your first shared animation in the server\",\r\n        [\"other\"] = {\r\n            [\"type\"] = 1,\r\n            [\"confetti\"] = true,\r\n            [\"sound\"] = true\r\n        },\r\n    },\r\n    [\"weapon\"] = {\r\n        [\"title\"] = \"First Weapon\",\r\n        [\"description\"] = \"Get your first weapon in the server\",\r\n        [\"other\"] = {\r\n            [\"type\"] = 2,\r\n            [\"confetti\"] = true,\r\n            [\"sound\"] = true\r\n        },\r\n    },\r\n    [\"salary\"] = {\r\n        [\"title\"] = \"First Salary\",\r\n        [\"description\"] = \"Get your first salary in the server\",\r\n        [\"other\"] = {\r\n            [\"type\"] = 0,\r\n            [\"confetti\"] = true,\r\n            [\"sound\"] = true\r\n        },\r\n    },\r\n    [\"clothes\"] = {\r\n        [\"title\"] = \"First Clothes\",\r\n        [\"description\"] = \"Get your first clothes in the server\",\r\n        [\"other\"] = {\r\n            [\"type\"] = 3,\r\n            [\"confetti\"] = true,\r\n            [\"sound\"] = true\r\n        },\r\n    },\r\n    [\"item\"] = {\r\n        [\"title\"] = \"First Item\",\r\n        [\"description\"] = \"Get your first item in the server\",\r\n        [\"other\"] = {\r\n            [\"type\"] = 0,\r\n            [\"confetti\"] = true,\r\n            [\"sound\"] = true\r\n        },\r\n    },\r\n    [\"phone\"] = {\r\n        [\"title\"] = \"First Phone\",\r\n        [\"description\"] = \"Get your first phone in the server\",\r\n        [\"other\"] = {\r\n            [\"type\"] = 2,\r\n            [\"confetti\"] = true,\r\n            [\"sound\"] = true\r\n        },\r\n    },\r\n    [\"goal\"] = {\r\n        [\"title\"] = \"First Scored Goal\",\r\n        [\"description\"] = \"Get your first goal in the server\",\r\n        [\"other\"] = {\r\n            [\"type\"] = 3,\r\n            [\"confetti\"] = true,\r\n            [\"sound\"] = true\r\n        },\r\n    },\r\n}","setup-translations#Setup Translations":"To make changes to certain translations, you can edit the index.html file.File Location: ic_trophies\\src\\ui\\index.html\nTo translate the content, you need to edit the HTML file. Look for the text that is inside the HTML tags. Once you find it, just modify that text. Make sure you don't change anything outside the tags to avoid problems."}},"/":{"title":"Introduction","data":{"":"Welcome to our FiveM script shop, where you can find the best scripts to enhance your FiveM gaming experience.\nWe offer a wide range of custom jobs, weapons, admin tools and more, to make your FiveM server stand out.Our scripts are easy to install and use, and we provide excellent customer support to ensure you have a seamless experience. Whether you're a seasoned FiveM veteran or a new player, our scripts will take your server to the next level. Browse our selection today and elevate your FiveM server!","about-us#About us":"Hello! We are Ice Cluster, a team of dedicated developers who invest substantial effort to ensure that all of our creations, intended for the FiveM community, are of impeccable quality and user-friendly. Our goal is to innovate by introducing projects that fill gaps in existing systems, and we thrive on healthy competition among developer groups. We devote significant time to pursuing our favorite hobby: crafting exciting projects."}}}